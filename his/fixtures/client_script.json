[
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Que",
  "enabled": 0,
  "modified": "2025-03-03 09:50:15.322535",
  "module": "HIS",
  "name": "Que Mode of Payment",
  "script": "frappe.ui.form.on('Que', {\n\tonload: function(frm) {\n        if (frappe.session.user) {\n            frappe.call({\n                method: \"frappe.client.get_list\",\n                args: {\n                    doctype: \"POS Profile\",\n                    filters: {\n                        \"applicable_for_users.user\": frappe.session.user\n                    },\n                    fields: [\"name\"]\n                },\n                callback: function(response) {\n                    if (response.message && response.message.length > 0) {\n                        let pos_profile = response.message[0].name;\n\n                        frappe.call({\n                            method: \"frappe.client.get_list\",\n                            args: {\n                                doctype: \"POS Payment Method\",\n                                filters: {\n                                    \"parent\": pos_profile\n                                },\n                                fields: [\"mode_of_payment\"]\n                            },\n                            callback: function(payment_response) {\n                                if (payment_response.message && payment_response.message.length > 0) {\n                                    frm.set_value(\"mode_of_payment\", payment_response.message[0].mode_of_payment);\n                                }\n                            }\n                        });\n                    }\n                }\n            });\n        }\n    },\n\t\n\trefresh(frm) {\n\t\t// your code here\n\t}\n})\n\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Emergency Triage",
  "enabled": 1,
  "modified": "2025-07-22 10:01:12.792172",
  "module": "HIS",
  "name": "emergency refer",
  "script": "frappe.ui.form.on('Emergency Triage', {\n\trefresh(frm) {\n\t    frm.add_custom_button('Refer', () => {\n                let d = new frappe.ui.Dialog({\n                    title: 'Enter details',\n                    fields: [\n                        {\n                            label: 'Type',\n                            fieldname: 'type',\n                            fieldtype: 'Select',\n                            options: \"Internal\\nExternal\"\n                        },\n                        {\n                            label: 'Practitioner',\n                            fieldname: 'practitioner',\n                            fieldtype: 'Link',\n                            options: 'Healthcare Practitioner',\n                            // reqd : 1,\n                            depends_on: \"eval:(doc.type != 'External' && doc.type == 'Internal')\",\n                            get_query: function() {\n                                return {\n                                    query: \"his.api.dp_drug_pr_link_query.my_custom_query\",  // Custom query method\n                                };\n                            },\n                        },\n                        {\n                            fieldname: \"to\",\n                            fieldtype: \"Data\",\n                            label: \"To\",\n                            depends_on: \"eval: doc.type == 'External'\",\n                        },\n                        {\n                            fieldname: \"rtype\",\n                            fieldtype: \"Data\",\n                            label: \"Type\",\n                            depends_on: \"eval: doc.type == 'External'\",\n                        },\n                        {\n                            fieldname: \"request\",\n                            fieldtype: \"Small Text\",\n                            label: \"Request\",\n                            depends_on: \"eval:(doc.type == 'External' || doc.type == 'Internal' )\",\n                        },\n\n                    ],\n                    primary_action_label: 'Submit',\n                    primary_action(values) {\n                        let practitioner = d.get_value(\"practitioner\")\n                        let to = d.get_value(\"to\")\n                        let rtype = d.get_value(\"rtype\")\n                        let request = d.get_value(\"request\")\n                        let type = d.get_value(\"type\")\n                        \n                        frappe.call({\n                            method: \"his.api.refer.refer_from_doctor\", //dotted path to server method\n                            args: {\n                                \"to\": to,\n                                \"rtype\": rtype,\n                                \"request\": request,\n                                \"docname\": frm.doc.name,\n                                \"practitioner\": practitioner,\n                                'patient': frm.doc.patient,\n                                'type': type,\n                                'ref_practitioner': frm.doc.practitioner\n                            },\n                            callback: function (r) {\n                                // code snippet\n\n                                // frm.set_value(\"status\" , \"Refered\")\n                                frappe.utils.play_sound(\"submit\")\n\n                                frappe.show_alert({\n                                    message: __('You have Refered Patient Succesfully'),\n                                    indicator: 'green',\n\n                                }, 5);\n                                let doc_ = r.message\n\n                                frappe.utils.print(doc_.doctype, doc_.name, \"referal form\" ,\"logo\")\n                            }\n                        });\n                        d.hide();\n\n\n                    }\n                });\n                // Set the custom query for the 'practitioner' field\n                frm.set_query('practitioner', function() {\n                    return {\n                        query: \"his.api.dp_drug_pr_link_query.my_custom_query\",  // Path to the custom query method\n                    };\n                });\n                d.show();\n\n\n            })\n\t}\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Nurse Flow",
  "enabled": 1,
  "modified": "2025-03-03 09:50:14.529715",
  "module": "HIS",
  "name": "Vital HR CS",
  "script": "// frappe.ui.form.on(\"Nurse Flow\", {\r\n//   refresh(frm) {\r\n//     // Hide the add-row and grid footers for child tables if they exist\r\n//     setTimeout(() => {\r\n//       [\r\n//         \"vital_hr\",\r\n//         \"input\",\r\n//         \"output_nurse_chart\",\r\n//         \"balance\",\r\n//         \"care\",\r\n//         \"mv\",\r\n//         \"drug\",\r\n//         \"drug2t\",\r\n//         \"drug3t\",\r\n//         \"device\",\r\n//         \"management\",\r\n//         \"tube\"\r\n//       ].forEach(fieldname => {\r\n//         if (frm.fields_dict[fieldname] && frm.fields_dict[fieldname].grid) {\r\n//           frm.fields_dict[fieldname].grid.wrapper.find('.grid-add-row').hide();\r\n//           frm.fields_dict[fieldname].grid.wrapper.find('.grid-footer').hide();\r\n//         }\r\n//       });\r\n//     }, 500);\r\n\r\n//     // Only create table rows if all these are empty\r\n//     // (to prevent duplications once data is present)\r\n//     if (\r\n//       !frm.doc.vital_hr &&\r\n//       !frm.doc.input &&\r\n//       !frm.doc.output_nurse_chart &&\r\n//       !frm.doc.balance &&\r\n//       !frm.doc.care &&\r\n//       !frm.doc.mv &&\r\n//       !frm.doc.drug &&\r\n//       !frm.doc.drug2t &&\r\n//       !frm.doc.drug3t\r\n//     ) {\r\n//       // Time slots\r\n//       const row_labels = [\r\n//         \"8AM\", \"9AM\", \"10AM\", \"11AM\", \"12PM\", \"1PM\", \"2PM\", \"3PM\",\r\n//         \"4PM\", \"5PM\", \"6PM\", \"7PM\", \"8PM\", \"9PM\", \"10PM\", \"11PM\",\r\n//         \"12AM\", \"1AM\", \"2AM\", \"3AM\", \"4AM\", \"5AM\", \"6AM\", \"7AM\"\r\n//       ];\r\n\r\n//       const inputs = [\r\n//         \"8AM\", \"9AM\", \"10AM\", \"11AM\", \"12PM\", \"1PM\", \"2PM\", \"3PM\",\r\n//         \"4PM\", \"5PM\", \"6PM\", \"7PM\", \"8PM\", \"9PM\", \"10PM\", \"11PM\",\r\n//         \"12AM\", \"1AM\", \"2AM\", \"3AM\", \"4AM\", \"5AM\", \"6AM\", \"7AM\",\r\n//         \"Total input\"\r\n//       ];\r\n\r\n//       const outputs = [\r\n//         \"8AM\", \"9AM\", \"10AM\", \"11AM\", \"12PM\", \"1PM\", \"2PM\", \"3PM\",\r\n//         \"4PM\", \"5PM\", \"6PM\", \"7PM\", \"8PM\", \"9PM\", \"10PM\", \"11PM\",\r\n//         \"12AM\", \"1AM\", \"2AM\", \"3AM\", \"4AM\", \"5AM\", \"6AM\", \"7AM\",\r\n//         \"Total output\"\r\n//       ];\r\n\r\n//       const drug = [\r\n//         \"Drug name\", \"Route\", \"Frequency\",\r\n//         \"8AM\", \"9AM\", \"10AM\", \"11AM\", \"12PM\", \"1PM\", \"2PM\", \"3PM\",\r\n//         \"4PM\", \"5PM\", \"6PM\", \"7PM\", \"8PM\", \"9PM\", \"10PM\", \"11PM\",\r\n//         \"12AM\", \"1AM\", \"2AM\", \"3AM\", \"4AM\", \"5AM\", \"6AM\", \"7AM\"\r\n//       ];\r\n\r\n//       // VITAL\r\n//       row_labels.forEach((label_val, i) => {\r\n//         // If the row doesn't exist, create it\r\n//         if (!frm.doc.vital_hr || !frm.doc.vital_hr[i]) {\r\n//           const row = frm.add_child(\"vital_hr\");\r\n//           row.rows_fields = label_val;\r\n//         } else {\r\n//           // Otherwise, just assign the label if it\u2019s empty\r\n//           frm.doc.vital_hr[i].rows_fields = label_val;\r\n//         }\r\n//       });\r\n//       frm.refresh_field(\"vital_hr\");\r\n\r\n//       // INPUT\r\n//       inputs.forEach(label_val => {\r\n//         const row = frm.add_child(\"input\");\r\n//         row.input_rows_fields = label_val;\r\n//       });\r\n//       frm.refresh_field(\"input\");\r\n\r\n//       // OUTPUT\r\n//       outputs.forEach(label_val => {\r\n//         const row = frm.add_child(\"output_nurse_chart\");\r\n//         row.out_put_rows_fields = label_val;\r\n//       });\r\n//       frm.refresh_field(\"output_nurse_chart\");\r\n\r\n//       // BALANCE (single row or however many you require)\r\n//       frm.add_child(\"balance\");\r\n//       frm.refresh_field(\"balance\");\r\n\r\n//       // CARE\r\n//       row_labels.forEach(label_val => {\r\n//         const row = frm.add_child(\"care\");\r\n//         row.care_rows_fields = label_val;\r\n//       });\r\n//       frm.refresh_field(\"care\");\r\n\r\n//       // MV\r\n//       row_labels.forEach(label_val => {\r\n//         const row = frm.add_child(\"mv\");\r\n//         row.mv_rows_fields = label_val;\r\n//       });\r\n//       frm.refresh_field(\"mv\");\r\n\r\n//       // DRUG\r\n//       drug.forEach(label_val => {\r\n//         const row = frm.add_child(\"drug\");\r\n//         row.drug_rows_fields = label_val;\r\n//       });\r\n//       frm.refresh_field(\"drug\");\r\n\r\n//       // DRUG2\r\n//       drug.forEach(label_val => {\r\n//         const row = frm.add_child(\"drug2t\");\r\n//         row.drug2_rows_fields = label_val;\r\n//       });\r\n//       frm.refresh_field(\"drug2t\");\r\n\r\n//       // DRUG3\r\n//       drug.forEach(label_val => {\r\n//         const row = frm.add_child(\"drug3t\");\r\n//         row.drug3_rows_fields = label_val;\r\n//       });\r\n//       frm.refresh_field(\"drug3t\");\r\n//     }\r\n\r\n//     // DEVICE (only if doc is new and device table is empty)\r\n//     if (\r\n      \r\n//       (!frm.doc.device)\r\n//     ) {\r\n//       const row_labels2 = [\r\n//         \"Peripheral line\",\r\n//         \"Centeral venus line\",\r\n//         \"Dialysis Catheter\",\r\n//         \"Drains\"\r\n//       ];\r\n//       row_labels2.forEach(label_val => {\r\n//         const row = frm.add_child(\"device\");\r\n//         row.device_rows_fields = label_val;\r\n//       });\r\n//       frm.refresh_field(\"device\");\r\n//     }\r\n\r\n//     // MANAGEMENT (only if doc is new and empty)\r\n//     if (\r\n      \r\n//       (!frm.doc.management)\r\n//     ) {\r\n//       const row_labels3 = [\"ETT\", \"Trach\", \"MV\", \"NIV\"];\r\n//       row_labels3.forEach(label_val => {\r\n//         const row = frm.add_child(\"management\");\r\n//         row.management_rows_fields = label_val;\r\n//       });\r\n//       frm.refresh_field(\"management\");\r\n//     }\r\n\r\n//     // TUBE (only if doc is new and empty)\r\n//     if (\r\n//       (!frm.doc.tube)\r\n//     ) {\r\n//       const row_labels4 = [\"Urinary catheter\", \"NG tube\"];\r\n//       row_labels4.forEach(label_val => {\r\n//         const row = frm.add_child(\"tube\");\r\n//         row.tube_rows_fields = label_val;\r\n//       });\r\n//       frm.refresh_field(\"tube\");\r\n//     }\r\n//   }\r\n// });\r\n\r\nfrappe.ui.form.on(\"Nurse Flow\", {\r\n  refresh(frm) {\r\n    // 1) Hide the add-row and grid-footers\r\n    setTimeout(() => {\r\n      [\r\n        \"vital_hr\",\r\n        \"input\",\r\n        \"output_nurse_chart\",\r\n        \"balance\",\r\n        \"care\",\r\n        \"mv\",\r\n        \"drug\",\r\n        \"drug2t\",\r\n        \"drug3t\",\r\n        \"device\",\r\n        \"management\",\r\n        \"tube\"\r\n      ].forEach(fieldname => {\r\n        if (frm.fields_dict[fieldname] && frm.fields_dict[fieldname].grid) {\r\n          frm.fields_dict[fieldname].grid.wrapper.find('.grid-add-row').hide();\r\n          frm.fields_dict[fieldname].grid.wrapper.find('.grid-footer').hide();\r\n        }\r\n      });\r\n    }, 500);\r\n\r\n    // 2) For each table, define the labels you need and \u201censure\u201d they exist\r\n    // --- VITAL HR ---\r\n    const vitalHRLabels = [\r\n      \"8AM\", \"9AM\", \"10AM\", \"11AM\", \"12PM\", \"1PM\", \"2PM\", \"3PM\",\r\n      \"4PM\", \"5PM\", \"6PM\", \"7PM\", \"8PM\", \"9PM\", \"10PM\", \"11PM\",\r\n      \"12AM\", \"1AM\", \"2AM\", \"3AM\", \"4AM\", \"5AM\", \"6AM\", \"7AM\"\r\n    ];\r\n    ensureRowsExist(frm, \"vital_hr\", \"rows_fields\", vitalHRLabels);\r\n\r\n    // --- INPUT ---\r\n    const inputLabels = [\r\n      \"8AM\", \"9AM\", \"10AM\", \"11AM\", \"12PM\", \"1PM\", \"2PM\", \"3PM\",\r\n      \"4PM\", \"5PM\", \"6PM\", \"7PM\", \"8PM\", \"9PM\", \"10PM\", \"11PM\",\r\n      \"12AM\", \"1AM\", \"2AM\", \"3AM\", \"4AM\", \"5AM\", \"6AM\", \"7AM\",\r\n      \"Total input\"\r\n    ];\r\n    ensureRowsExist(frm, \"input\", \"input_rows_fields\", inputLabels);\r\n\r\n    // --- OUTPUT ---\r\n    const outputLabels = [\r\n      \"8AM\", \"9AM\", \"10AM\", \"11AM\", \"12PM\", \"1PM\", \"2PM\", \"3PM\",\r\n      \"4PM\", \"5PM\", \"6PM\", \"7PM\", \"8PM\", \"9PM\", \"10PM\", \"11PM\",\r\n      \"12AM\", \"1AM\", \"2AM\", \"3AM\", \"4AM\", \"5AM\", \"6AM\", \"7AM\",\r\n      \"Total output\"\r\n    ];\r\n    ensureRowsExist(frm, \"output_nurse_chart\", \"out_put_rows_fields\", outputLabels);\r\n\r\n    // --- BALANCE ---\r\n    // (Just one row if you want exactly one)\r\n    ensureSingleRow(frm, \"balance\"); \r\n\r\n    // --- CARE ---\r\n    ensureRowsExist(frm, \"care\", \"care_rows_fields\", vitalHRLabels);\r\n\r\n    // --- MV ---\r\n    ensureRowsExist(frm, \"mv\", \"mv_rows_fields\", vitalHRLabels);\r\n\r\n    // --- DRUG ---\r\n    const drugLabels = [\r\n      \"Drug name\", \"Route\", \"Frequency\",\r\n      \"8AM\", \"9AM\", \"10AM\", \"11AM\", \"12PM\", \"1PM\", \"2PM\", \"3PM\",\r\n      \"4PM\", \"5PM\", \"6PM\", \"7PM\", \"8PM\", \"9PM\", \"10PM\", \"11PM\",\r\n      \"12AM\", \"1AM\", \"2AM\", \"3AM\", \"4AM\", \"5AM\", \"6AM\", \"7AM\"\r\n    ];\r\n    ensureRowsExist(frm, \"drug\",   \"drug_rows_fields\",   drugLabels);\r\n    ensureRowsExist(frm, \"drug2t\", \"drug2_rows_fields\",  drugLabels);\r\n    ensureRowsExist(frm, \"drug3t\", \"drug3_rows_fields\",  drugLabels);\r\n\r\n    // --- DEVICE ---\r\n    const deviceLabels = [\r\n      \"Peripheral line\",\r\n      \"Centeral venus line\",\r\n      \"Dialysis Catheter\",\r\n      \"Drains\"\r\n    ];\r\n    ensureRowsExist(frm, \"device\", \"device_rows_fields\", deviceLabels);\r\n\r\n    // --- MANAGEMENT ---\r\n    const managementLabels = [\"ETT\", \"Trach\", \"MV\", \"NIV\"];\r\n    ensureRowsExist(frm, \"management\", \"management_rows_fields\", managementLabels);\r\n\r\n    // --- TUBE ---\r\n    const tubeLabels = [\"Urinary catheter\", \"NG tube\"];\r\n    ensureRowsExist(frm, \"tube\", \"tube_rows_fields\", tubeLabels);\r\n  }\r\n});\r\n\r\n\r\n/**\r\n * Adds missing rows to a child table so that every label in `requiredLabels`\r\n * is present at least once in the specified fieldname.\r\n * @param {Object} frm - The current form\r\n * @param {String} childTableField - Child table field name (e.g. \"device\")\r\n * @param {String} rowFieldName - Field in the child row holding the label (e.g. \"device_rows_fields\")\r\n * @param {Array} requiredLabels - Array of string labels that must exist\r\n */\r\nfunction ensureRowsExist(frm, childTableField, rowFieldName, requiredLabels) {\r\n  const table = frm.doc[childTableField] || [];\r\n  // Gather all existing labels in that child table\r\n  const existingLabels = table.map(row => row[rowFieldName]);\r\n\r\n  // For each required label, if it's missing, add it\r\n  requiredLabels.forEach(label => {\r\n    if (!existingLabels.includes(label)) {\r\n      const newRow = frm.add_child(childTableField);\r\n      newRow[rowFieldName] = label;\r\n    }\r\n  });\r\n\r\n  frm.refresh_field(childTableField);\r\n}\r\n\r\n/**\r\n * Ensures at least one row in the given child table\r\n * If you only want exactly one row, you can expand on this logic.\r\n */\r\nfunction ensureSingleRow(frm, childTableField) {\r\n  if (!frm.doc[childTableField] || frm.doc[childTableField].length === 0) {\r\n    frm.add_child(childTableField);\r\n    frm.refresh_field(childTableField);\r\n  }\r\n}\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Purchase Order",
  "enabled": 1,
  "modified": "2025-03-03 09:50:14.744468",
  "module": "HIS",
  "name": "Store cost center selection",
  "script": "frappe.ui.form.on('Purchase Order', {\n\trefresh(frm) {\n\t\t// your code here\n\t},\n\tcost_center: function(frm){\n\t    console.log(frm)\n\t     frm.doc.items.forEach(row => {\n            if (row.item_code) {\n                        frappe.model.set_value(row.doctype, row.name, 'cost_center', frm.doc.cost_center);\n            }\n        });\n\t},\n\t\n\n})\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Purchase Receipt",
  "enabled": 1,
  "modified": "2025-03-03 09:50:14.917448",
  "module": "HIS",
  "name": "Cost center selection Purchase Receipt",
  "script": "frappe.ui.form.on('Purchase Receipt', {\n\trefresh(frm) {\n\t\t// your code here\n\t},\n\t\tcost_center: function(frm){\n\t     frm.doc.items.forEach(row => {\n            if (row.item_code) {\n                        frappe.model.set_value(row.doctype, row.name, 'cost_center', frm.doc.cost_center);\n            }\n        });\n\t}\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Stock Entry",
  "enabled": 1,
  "modified": "2025-03-03 09:50:14.892790",
  "module": "HIS",
  "name": "Cost center selection Stock Entry",
  "script": "frappe.ui.form.on('Stock Entry', {\n\trefresh(frm) {\n\t\t// your code here\n\t},\n\tcost_center: function(frm){\n\t   // console.log(frm)\n\t     frm.doc.items.forEach(row => {\n\t         console.log(row)\n            if (row.item_code) {\n                        frappe.model.set_value(row.doctype, row.name, 'cost_center', frm.doc.cost_center);\n            }\n        });\n\t}\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Order",
  "enabled": 1,
  "modified": "2025-03-03 09:50:14.950679",
  "module": "HIS",
  "name": "Sales Order Form",
  "script": "frappe.ui.form.on('Sales Order', {\n\trefresh(frm) {\n\t    \n// if (!frm.is_new() && !frm.doc.total_with_vat ) {\n//     frappe.db.set_value(\"Sales Order\", frm.doc.name, { \"total_with_vat\": (frm.doc.grand_total * 1.05)});\n// }\n// \tif(flt(frm.doc.per_billed, 6) < 100) {\n\t\t\tfrm.add_custom_button(__('Cash Sales'), () => make_sales_invoice(frm));\n\t\t\t\tfrm.add_custom_button(__('Credit Sales'), () => make_credit_invoice(frm));\n// \t\t}\n\t},\n\t\t   \n\npatient:function(frm){  \n    if(frm.is_new()){\n\t       //frm.set_value(\"total_with_vat\", (frm.doc.grand_total * 1.05))\n\t       //console.log(frm.doc.patient_name)\n    }\n\t         \n}\n\t    \n})\n\nvar make_sales_invoice =  function(frm) {\n\t\tfrappe.model.open_mapped_doc({\n\t\t\tmethod: \"his.api.make_invoice.make_sales_invoice\",\n\t\t\tfrm: frm\n\t\t})\n\t}\n\t\n\tvar make_credit_invoice =  function(frm) {\n\t\tfrappe.model.open_mapped_doc({\n\t\t\tmethod: \"his.api.make_invoice.make_credit_invoice\",\n\t\t\tfrm: frm\n\t\t})\n\t}",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Patient",
  "enabled": 1,
  "modified": "2025-03-03 09:50:15.154316",
  "module": "HIS",
  "name": "Patient",
  "script": "frappe.ui.form.on('Patient', {\n\trefresh(frm) {\n\t\t// your code here\n\t\tfrm.add_custom_button(__(\"Vitals\"), function(){\n  //perform desired action such as routing to new form or fetching etc.\n  frappe.new_doc(\"Vital Signs\" , {\"patient\": frm.doc.name})\n})\n\n\t\tfrm.add_custom_button(__(\"Que\"), function(){\n  //perform desired action such as routing to new form or fetching etc.\n  frappe.new_doc(\"Que\" , {\"patient\": frm.doc.name})\n})\n\n\n\t}\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sample Collection",
  "enabled": 1,
  "modified": "2025-03-03 09:50:15.274426",
  "module": "HIS",
  "name": "hide_custome",
  "script": "frappe.ui.form.on('Sample Collection', {\n\trefresh(frm) {\n\t\t// your code here\n\t\tfrm.remove_custom_button(\"Print Barcode\")\n\t}\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Patient Encounter",
  "enabled": 0,
  "modified": "2025-05-06 10:31:58.772467",
  "module": "HIS",
  "name": "Patient Encounter",
  "script": "frappe.ui.form.on('Patient Encounter', {\n\trefresh(frm) {\n\t    \n\t   // if (frm.doc.medical_department)\t\n        frm.set_query('procedure', 'procedure_prescription', function() {\n            return {\n                // query: \"his.api.dp_drug_pr_link_query.my_custom_query\",\n                filters: {\n                    'medical_department': frm.doc.medical_department\n                }\n                \n            };\n        })\n   \n            frm.set_query('service', 'services_prescription', function() {\n            return {\n                filters: frm.doc.medical_department ? { 'department': frm.doc.medical_department } : {}\n            };\n        });\n        \n        frm.set_query('drug_code', 'drug_prescription', function() {\n            return {\n                // query: \"his.api.dp_drug_pr_link_query.my_custom_query\",\n                filters: {\n                    \"item_group\": \"Drug\"\n                }\n                \n            };\n        })\n     \n\t   //frm.add_custom_button('Open History', () => {\n    //         if(frm.doc.patient){\n    //         frappe.call({\n\t\t\t\t// method: \"his.api.p_history.get_history\", //dotted path to server method\n\t\t\t\t// args : {\"patient\" : frm.doc.patient},\n\t\t\t\t// //  args : {\"load_a\" : currdate , to_date : to_date},\n\t\t\t\t// callback: function(r) {\n\t\t\t\t\n\t\t\t\t// \tvar x = window.open();\n\t\t\t\t// \tx.document.open().write(r.message);\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\n\t\t\t\t// }})\n    //         }\n    //       });\n\t    \n\t   // frm.add_custom_button('Open Opthalmology History', () => {\n    //         if(frm.doc.patient){\n    //         frappe.call({\n\t\t\t\t// method: \"his.dashboard_and_history.opthalmology_history.get_history\", //dotted path to server method\n\t\t\t\t// args : {\"patient\" : frm.doc.patient, \"doc\": frm.doc.name},\n\t\t\t\t// //  args : {\"load_a\" : currdate , to_date : to_date},\n\t\t\t\t// callback: function(r) {\n\t\t\t\t\n\t\t\t\t// \tvar x = window.open();\n\t\t\t\t// \tx.document.open().write(r.message);\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\n\t\t\t\t// }})\n    //         }\n    //       });   \n\t    \n// \t frm.set_query('optical_code', 'optical_prescription', function() {\n//             return {\n//                 // query: \"his.api.dp_drug_pr_link_query.my_custom_query\",\n//                 filters: {\n//                     \"item_group\": \"Optical\",\n//                 }\n                \n//             };\n//         })\n \n\t\t\t\n\t\t\t\n//     \t\tif (frm.is_new()){\n\t   \n// \t    let data= [\"DV\", \"ADD\"]\n// \t    data.forEach( (va , ind) => {\n// \t    var right = frm.add_child('right_eye');\n//                 right.name1 = va;\n                \n//         var left = frm.add_child('left_eye');\n//                 left.name1 = va;\n//                 // if (ind==1){\n//                 //     // frm.set_df_property(\"\")\n//                 // }\n//                 frm.refresh_field('left_eye');\n//                 frm.refresh_field('right_eye');\n//                 // console.log(va)\n// \t    })\n// \t}\n\t\n    if (!frm.is_new()) {\n\t\t\n        frm.add_custom_button(__('Print Medication'), function(){\n            var url=`${frappe.urllib.get_base_url()}/printview?doctype=Patient%20Encounter&name=${frm.doc.name}&trigger_print=1&format=Medication%20Prescription&no_letterhead=0&letterhead=Logo&settings=%7B%7D&_lang=en-US`\n            window.open(url, '_blank');\n        }, __(\"Print\"));\n        frm.add_custom_button(__('Print Lab'), function(){\n            var url=`${frappe.urllib.get_base_url()}/printview?doctype=Patient%20Encounter&name=${frm.doc.name}&trigger_print=1&format=Lab%20Prescription&no_letterhead=0&letterhead=Logo&settings=%7B%7D&_lang=en-US`\n            window.open(url, '_blank');\n        }, __(\"Print\"));\n        frm.add_custom_button(__('Print Procedure'), function(){\n            var url=`${frappe.urllib.get_base_url()}/printview?doctype=Patient%20Encounter&name=${frm.doc.name}&trigger_print=1&format=Procedure%20Prescription&no_letterhead=0&letterhead=Logo&settings=%7B%7D&_lang=en-US`\n            window.open(url, '_blank');\n        }, __(\"Print\"));\n\n        frm.add_custom_button(__('Print Radiology'), function(){\n            var url=`${frappe.urllib.get_base_url()}/printview?doctype=Patient%20Encounter&name=${frm.doc.name}&trigger_print=1&format=Radiology%20Prescriptions&no_letterhead=0&letterhead=Logo&settings=%7B%7D&_lang=en-US`\n            window.open(url, '_blank');\n        }, __(\"Print\"));\n        \n          frm.add_custom_button(__('Print Services'), function(){\n            var url=`${frappe.urllib.get_base_url()}/printview?doctype=Patient%20Encounter&name=${frm.doc.name}&trigger_print=1&format=Services%20Prescription&no_letterhead=0&letterhead=Logo&settings=%7B%7D&_lang=en-US`\n            window.open(url, '_blank');\n        }, __(\"Print\"));\n        \n            frm.add_custom_button(__('Print Package'), function(){\n            var url=`${frappe.urllib.get_base_url()}/printview?doctype=Patient%20Encounter&name=${frm.doc.name}&trigger_print=1&format=Package&no_letterhead=0&letterhead=Logo&settings=%7B%7D&_lang=en-US`\n            window.open(url, '_blank');\n        }, __(\"Print\"));\n    }\n    \n    \n     \n\t},\n\t\tadd_vital_sign:function(frm){\n\t    \n\t   // frm.new_doc(\"\")\n\t     frappe.new_doc(\"Vital Signs\",{\"patient\": frm.doc.patient, }) \n\n\t}\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Order",
  "enabled": 1,
  "modified": "2025-03-03 09:50:15.259252",
  "module": "HIS",
  "name": "Sales Order",
  "script": "frappe.listview_settings['Sales Order'] = {\n    // filters: [\n    //     ['Status', '=', \"Admitted\"]\n    // ],\n    colwidths: {\"customer_name\": 10},\n    filters:[[\"status\",\"!=\", \"To Deliver and Bill\"]],\n  \n     get_indicator(doc) {\n        // customize indicator color\n        if (doc.status == \"To Deliver and Bill\") {\n            \n            return [__(\"To Bill\"), \"red\" , \"Document Status =To Deliver and Bill \"];\n        }\n        if(doc.status = \"Submitted\"){\n            \n              return [__(\"Compeleted\"), \"green\" , \"Document Status =To Deliver and Bill \"];\n        }\n    },\n     hide_name_column: true,\n\n}",
  "view": "List"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Invoice",
  "enabled": 0,
  "modified": "2025-03-03 09:50:15.241798",
  "module": "HIS",
  "name": "pivot_table_test",
  "script": "// frappe.ui.form.on('Sales Invoice', {\n// \trefresh(frm) {\n// \t\t// your code here\n// \t}\n// })\n\nfrappe.ui.form.on('Sales Invoice', {\n    refresh: function(frm) {\n        // Check if the HTML field exists in the form\n        if (!frm.fields_dict['pivot_table']) return;\n\n        // Set the container for the pivot table\n        frm.fields_dict['pivot_table'].html(`\n            <div id=\"pivot-table-container\"></div>\n        `);\n\n        // Fetch or define the data to be used in the pivot table\n        const pivotData = [\n            { \"date\": \"2022-01-01\", \"sales\": 100, \"city\": \"New York\" },\n            { \"date\": \"2022-01-02\", \"sales\": 120, \"city\": \"Los Angeles\" },\n            { \"date\": \"2022-01-03\", \"sales\": 150, \"city\": \"Chicago\" }\n        ];\n\n        // Initialize the pivot table\n        new frappe.ui.PivotTable({\n            parent: $('#pivot-table-container'),\n            data: pivotData, // Replace with your data\n            rows: ['date'], // Define rows for the pivot table\n            columns: ['city'], // Define columns for the pivot table\n            values: ['sales'], // Define values for the pivot table\n            aggregation: 'sum' // Aggregation method (sum, count, etc.)\n        });\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Invoice",
  "enabled": 0,
  "modified": "2025-03-03 09:50:14.981689",
  "module": "HIS",
  "name": "Update Insurance",
  "script": "frappe.ui.form.on('Sales Invoice', {\r\n    refresh(frm) {\r\n        setTimeout(() => {\r\n            if (frm.doc.is_pos && frm.doc.coverage_limits && !frm.doc.insurance_coverage_amount) {\r\n                // Calculate the insurance and patient amounts\r\n                let insurance_amount = (frm.doc.grand_total * frm.doc.coverage_limits) / 100;\r\n                let patient_amount = frm.doc.grand_total - insurance_amount;\r\n\r\n                // Check and set the payment amount\r\n                if (frm.doc.payments && frm.doc.payments.length > 0) {\r\n                    frm.doc.payments[0].amount = patient_amount;\r\n                    frm.refresh_field('payments');\r\n                }\r\n            }\r\n        }, 1000); // 1000 ms delay\r\n        \r\n          setTimeout(() => {\r\n            if (!frm.doc.is_pos && frm.doc.coverage_limits && !frm.doc.insurance_coverage_amount) {\r\n                // Calculate the insurance and patient amounts\r\n                let insurance_amount = (frm.doc.grand_total * frm.doc.coverage_limits) / 100;\r\n                let patient_amount = frm.doc.grand_total - insurance_amount;\r\n\r\n                // Check and set the payment amount\r\n                frm.set_value(\"insurance_coverage_amount\",insurance_amount)\r\n                frm.set_value(\"payable_amount\",patient_amount)\r\n                    frm.refresh_field('insurance_coverage_amount');\r\n                    frm.refresh_field('payable_amount');\r\n                \r\n            }\r\n        }, 1000); // 1000 ms delay\r\n    },\r\n    \r\n      discount_amount: function(frm) {\r\n        setTimeout(() => {\r\n            if (frm.doc.is_pos && frm.doc.coverage_limits) {\r\n                // Calculate the insurance and patient amounts\r\n                let insurance_amount = (frm.doc.grand_total * frm.doc.coverage_limits) / 100;\r\n                let patient_amount = frm.doc.grand_total - insurance_amount;\r\n\r\n                // Check and set the payment amount\r\n                if (frm.doc.payments && frm.doc.payments.length > 0) {\r\n                    frm.doc.payments[0].amount = patient_amount;\r\n                    frm.refresh_field('payments');\r\n                }\r\n            }\r\n        }, 1000); // 1000 ms delay\r\n        \r\n        \r\n        /// checking if is credit\r\n          setTimeout(() => {\r\n            if (!frm.doc.is_pos && frm.doc.coverage_limits) {\r\n                // Calculate the insurance and patient amounts\r\n                let insurance_amount = (frm.doc.grand_total * frm.doc.coverage_limits) / 100;\r\n                let patient_amount = frm.doc.grand_total - insurance_amount;\r\n                frm.set_value(\"insurance_coverage_amount\",insurance_amount);\r\n                frm.set_value(\"payable_amount\",patient_amount);\r\n                    frm.refresh_field('insurance_coverage_amount');\r\n                    frm.refresh_field('payable_amount');\r\n            }\r\n        }, 1000); // 1000 ms delay\r\n    },\r\n    \r\n    // is_pos: function(frm) {\r\n    //     if (!frm.doc.items[0].sales_order){\r\n    //     setTimeout(() => {\r\n    //         if (frm.doc.is_pos == 1 && frm.doc.coverage_limits) {\r\n                \r\n    //             // Calculate the insurance and patient amounts\r\n    //             let insurance_amount = (frm.doc.grand_total * frm.doc.coverage_limits) / 100;\r\n    //             let patient_amount = frm.doc.grand_total - insurance_amount;\r\n\r\n    //             // Check and set the payment amount\r\n    //             if (frm.doc.payments && frm.doc.payments.length > 0) {\r\n    //                 frm.doc.payments[0].amount = patient_amount;\r\n    //                 frm.refresh_field('payments');\r\n    //             }\r\n    //         }\r\n    //     }, 1000); // 1000 ms delay\r\n        \r\n    //     }\r\n        \r\n    // }\r\n    \r\n    \r\n});\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Insurance Claim",
  "enabled": 0,
  "modified": "2025-03-03 09:50:15.209945",
  "module": "HIS",
  "name": "Insurance Claim",
  "script": "frappe.ui.form.on('Insurance Claim', {\n\trefresh(frm) {\n\t\t// your code here\n        // Control visibility of 'is_rejected' field\n        frm.set_df_property('is_rejected', 'hidden', frm.doc.docstatus !== 1);\n    \n\t}\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Lead",
  "enabled": 1,
  "modified": "2025-03-03 09:50:15.177838",
  "module": "HIS",
  "name": "Lead",
  "script": "frappe.ui.form.on(\"Lead\", {\n    refresh: function (frm) {\n        // Add a button to create Opportunities from family members\n        frm.add_custom_button(__('Create Opportunities'), function () {\n            frappe.utils.play_sound(\"submit\")\n            frappe.show_alert({\n\t\t\t\t\t\t\t\t\tmessage:__('Opportunity Created Succesfully'),\n\t\t\t\t\t\t\t\t\tindicator:'green',\n\t\t\t\t\t\t\t\t}, 5);\n            frm.trigger('create_opportunities');\n        }, __('Actions'));\n    },\n\n    create_opportunities: function (frm) {\n        // Call the backend function to create Opportunity documents\n        frappe.call({\n            method: \"erpnext.crm.doctype.lead.lead.create_opportunities_from_family_members\",\n            args: { lead_name: frm.doc.name },\n            callback: function (response) {\n                if (response.message && response.message.length > 0) {\n                    // Show a message listing the created Opportunity documents\n                    frappe.msgprint(__('Opportunities created: {0}'.format(response.message.join(', '))));\n                } else {\n                    frappe.msgprint(__('No opportunities were created.'));\n                }\n            }\n        });\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Que",
  "enabled": 0,
  "modified": "2025-03-03 09:50:15.024795",
  "module": "HIS",
  "name": "Discount Que",
  "script": "frappe.ui.form.on('Que', {\n\trefresh(frm) {\n\t\t// your code here\n\t},\n\tdiscount: function(frm) {\n\t    if (frm.doc.discount >= 0) {\n\t        frm.set_value(\"payable_amount\", frm.doc.doctor_amount - frm.doc.discount)\n\t    }\n\t}\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Lab Result",
  "enabled": 1,
  "modified": "2025-07-22 09:08:33.736678",
  "module": "HIS",
  "name": "Lab Result Flag",
  "script": "frappe.ui.form.on('Normal Test Result', {\n    result_value: function(frm, cdt, cdn) {\n        let row = locals[cdt][cdn];\n\n        // Mark done if result exists\n        row.custom_done = row.result_value ? 1 : 0;\n\n        // let value = parseFloat(row.result_value);\n        // if (isNaN(value)) {\n        //     row.flag = '';\n        //     frm.refresh_field('normal_test_items');\n        //     return;\n        // }\n\n        // if (row.normal_range) {\n        //     // Extract numeric range or condition like <30, >50, 30-100, \"up to 200\", or \"< 150\"\n        //     let range_match = row.normal_range.match(/([<>]?\\s*\\d+\\.?\\d*)\\s*-\\s*(\\d+\\.?\\d*)|([<>]\\s*\\d+\\.?\\d*)|up\\s*to\\s*(\\d+\\.?\\d*)/);\n\n        //     if (range_match) {\n        //         if (range_match[1] && range_match[2]) {\n        //             // It's a range like 30.0-100\n        //             let low = parseFloat(range_match[1].replace(/[^\\d.]/g, ''));\n        //             let high = parseFloat(range_match[2]);\n        //             row.flag = value > high ? 'H' : (value < low ? 'L' : '');\n        //         } else if (range_match[3]) {\n        //             // It's a condition like <30 or >100\n        //             let condition = range_match[3].replace(/\\s/g, '');\n        //             if (condition.startsWith('<')) {\n        //                 let upper = parseFloat(condition.substring(1));\n        //                 row.flag = value > upper ? 'H' : '';\n        //             } else if (condition.startsWith('>')) {\n        //                 let lower = parseFloat(condition.substring(1));\n        //                 row.flag = value < lower ? 'L' : '';\n        //             }\n        //         } else if (range_match[4]) {\n        //             // It's a condition like \"up to 200\"\n        //             let upper = parseFloat(range_match[4]);\n        //             row.flag = value > upper ? 'H' : '';\n        //         }\n        //     } else {\n        //         row.flag = ''; // No condition matched, clear the flag\n        //     }\n        // } else {\n        //     row.flag = ''; // No normal range, clear the flag\n        // }\n\n        frm.refresh_field(\"normal_test_items\");\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "User Creation",
  "enabled": 1,
  "modified": "2025-03-03 09:50:15.102141",
  "module": "HIS",
  "name": "UserCrea",
  "script": "frappe.ui.form.on('User Creation', {\n\trefresh(frm) {\n\t\t// your code here\n\t\tif(frm.doc.docstatus ==1 ){\n\t\t    \n\t\t    \t\tfrm.add_custom_button(__(\"Create User\"), function(){\n                      //perform desired action such as routing to new form or fetching etc.\n                      frappe.new_doc(\"User\" , {\"first_name\": frm.doc.employee_name})\n                    })\n\t\t    \n\t\t}\n\n\t}\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Clinical Procedure",
  "enabled": 0,
  "modified": "2025-03-03 09:50:15.073316",
  "module": "HIS",
  "name": "Clinical",
  "script": "frappe.ui.form.on('Clinical Procedure', {\n\trefresh: function(frm) {\n        // Check if the Start button exists, and then bind your function\n        frm.fields_dict['start'].$input.on('click', function() {\n            console.log(\"Hello, I have being clicked!!\")\n            frappe.call({\n                method: 'his.api.sales_invoice_refund_control.update_clinical_procedure',  // Replace with your function's path\n                args: {\n                    docname: frm.doc.name  // Pass the document name\n                },\n                callback: function(response) {\n                    // Handle the response if needed\n                    frappe.msgprint(__('Function executed successfully!'));\n                }\n            });\n        });\n    }\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Invoice",
  "enabled": 1,
  "modified": "2025-05-27 09:15:24.308935",
  "module": "HIS",
  "name": "Bill To",
  "script": "frappe.ui.form.on('Sales Invoice', {\n\trefresh(frm) {\n\t\t// your code here\n\t\t if(frm.doc.customer_group== \"Membership\"  && frm.doc.so_type==\"Cashiers\" && !frm.doc.additional_discount_percentage && frm.is_new()){\n\t        frm.set_value(\"additional_discount_percentage\", 50)\n\t    }\n\t},\n\t\tpatient: function(frm){\n\t   // alert()\n\t    if(frm.doc.customer_group== \"Membership\"  && frm.doc.so_type==\"Cashiers\" && !frm.doc.additional_discount_percentage){\n\t        frm.set_value(\"additional_discount_percentage\", 50)\n\t    }\n\t},\n\n    bill_to_employee: function(frm) {\n        if (!frm.doc.bill_to_employee) {  // Check if the checkbox is unchecked\n            frm.set_value('employee', '');  // Clear the dependent field\n        }\n    },\n    is_inpatient: function(frm) {\n        if (!frm.doc.is_inpatient) {  // Check if the checkbox is unchecked\n            frm.set_value('bill_to_patient', '');  // Clear the dependent field\n        }\n    },   \n    \n    // before_cancel : function (frm){\n    //     if (!frm.doc.comment){\n    //         frappe.throw(\"write Cancelation Reason!!\")\n             \n    //     }\n    //     frm.set_df_property('comment',  'reqd',  1);\n\n    // }\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Que",
  "enabled": 1,
  "modified": "2025-07-22 12:49:13.566390",
  "module": "HIS",
  "name": "Is Free",
  "script": "frappe.ui.form.on('Que', {\n    before_save: function(frm){\n         if (frm.is_new() && frm.doc.follow_up != 1 && frm.doc.que_type!=\"Refer With Payment\") { \n            frm.set_value(\"que_type\", \"New Patient\");\n            frm.set_value(\"status\", \"Open\");\n        }\n    },\n\trefresh(frm) {\n\t\t// your code here\n\t\tfrm.set_query(\"cost_center\", function() {\n         return {\n         \"filters\": {\n         \"company\": frm.doc.company\n        \n         }\n         };\n         });\n\t},\n\t\n\tis_free: function(frm) {\n        if (!frm.doc.is_free) {  // Check if the checkbox is unchecked\n            frm.set_value('reference', ''); \n        }\n    },\n  \n    \tis_refer: function(frm){\n\t    if (frm.doc.is_refer===1){\n\t         frm.set_value(\"que_type\", \"Refer With Payment\")\n\n\t    }\n\t     else {\n\t         frm.set_value(\"que_type\", \"New Patient\")\n\n\t    }\n\t     \n\t   \n\t}\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "OR Confirmation Form",
  "enabled": 1,
  "modified": "2025-03-03 09:50:15.044336",
  "module": "HIS",
  "name": "Check before save",
  "script": "frappe.ui.form.on('OR Confirmation Form', {\n    before_save: function(frm) {\n        // Check if both fields 'A' and 'B' are checked\n        if (!frm.doc.financially_cleared || !frm.doc.or_informed) {\n            // Show an alert if either field is not checked\n            frappe.msgprint(__('Both fields Financially Cleared and OR Informed must be checked before saving.'));\n            // Prevent the form from being saved by returning false\n            frappe.validated = false;\n        }\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Healthcare Requests",
  "enabled": 1,
  "modified": "2025-03-03 09:50:14.700432",
  "module": "HIS",
  "name": "glass prescription",
  "script": "frappe.ui.form.on(\"Healthcare Requests\", {\r\n  refresh(frm) {\r\n    // 1) SAFETY CHECK: Make sure the field name is correct and the grid exists\r\n    if (frm.fields_dict[\"glass_prescription\"] && frm.fields_dict[\"glass_prescription\"].grid) {\r\n\r\n      // 2) (OPTIONAL) Add a click event on the child table's grid wrapper\r\n    //   frm.fields_dict[\"glass_prescription\"].grid.wrapper.on(\"click\", function() {\r\n    //     frappe.msgprint(__(\"You are now in the Glass Prescription child table.\"));\r\n    //   });\r\n    }\r\n\r\n    // 3) If you want to automatically insert 3 rows (Constant, Distance, Near) when the doc is new:\r\n    if (\r\n     \r\n      (!frm.doc.glass_prescription || frm.doc.glass_prescription.length === 0)\r\n    ) {\r\n      const row_labels = [\"Constant\", \"Distance\", \"Near\"];\r\n\r\n      row_labels.forEach(label_val => {\r\n        let row = frm.add_child(\"glass_prescription\");\r\n        // Assuming your child table has a field named \"label\" or something similar\r\n        row.rows_fields = label_val;\r\n      });\r\n      frm.refresh_field(\"glass_prescription\");\r\n    }\r\n  }\r\n});\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Patient Encounter",
  "enabled": 1,
  "modified": "2025-03-11 10:43:05.423034",
  "module": "HIS",
  "name": "Eye Glass Prescription",
  "script": "frappe.ui.form.on(\"Patient Encounter\", {\r\n  refresh(frm) {\r\n    // 1) SAFETY CHECK: Make sure the field name is correct and the grid exists\r\n    if (frm.fields_dict[\"eye_glass_prescription\"] && frm.fields_dict[\"eye_glass_prescription\"].grid) {\r\n\r\n      // 2) (OPTIONAL) Add a click event on the child table's grid wrapper\r\n    //   frm.fields_dict[\"glass_prescription\"].grid.wrapper.on(\"click\", function() {\r\n    //     frappe.msgprint(__(\"You are now in the Glass Prescription child table.\"));\r\n    //   });\r\n    }\r\n\r\n    // 3) If you want to automatically insert 3 rows (Constant, Distance, Near) when the doc is new:\r\n    if (\r\n      frm.is_new() &&\r\n      (!frm.doc.glass_prescription || frm.doc.glass_prescription.length === 0  )\r\n    ) {\r\n      const row_labels = [\"Constant\", \"Distance\", \"Near\"];\r\n\r\n      row_labels.forEach(label_val => {\r\n        let row = frm.add_child(\"eye_glass_prescription\");\r\n        // Assuming your child table has a field named \"label\" or something similar\r\n        row.rows_fields = label_val;\r\n      });\r\n      frm.refresh_field(\"eye_glass_prescription\");\r\n    }\r\n  },\r\n  add_vital_signs:function(frm){\r\n\t    \r\n\t   // frm.new_doc(\"\")\r\n\t     frappe.new_doc(\"Vital Signs\",{\"patient\": frm.doc.patient, }) \r\n\r\n\t}\r\n});\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Invoice",
  "enabled": 0,
  "modified": "2025-03-03 09:50:14.870244",
  "module": "HIS",
  "name": "Remark on Cancel",
  "script": "frappe.ui.form.on('Sales Invoice', {\n\trefresh(frm) {\n\t\t// your code here\n\t},\n\t\n\tonload: function (frm) {\n        // Override the default cancel button behavior\n        frm.page.set_primary_action(__('Cancel'), function () {\n            // Show custom dialog before proceeding with cancellation\n            frappe.prompt(\n                [\n                    {\n                        label: 'Cancel Remark',\n                        fieldname: 'cancel_remark',\n                        fieldtype: 'Small Text',\n                        reqd: 1, // Make it mandatory\n                    },\n                ],\n                function (values) {\n                    // Save the remark\n                    frappe.call({\n                        method: 'frappe.client.set_value',\n                        args: {\n                            doctype: 'Sales Invoice',\n                            name: frm.doc.name,\n                            fieldname: 'cancel_remark',\n                            value: values.cancel_remark,\n                        },\n                        callback: function () {\n                            frappe.msgprint(__('Cancel Remark saved successfully. Proceeding to cancel the document.'));\n                            // Trigger the default cancel action\n                            frm.savecancel();\n                        },\n                    });\n                },\n                'Cancel Sales Invoice',\n                'Submit'\n            );\n        });\n    },\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Daily Follow Up",
  "enabled": 1,
  "modified": "2025-03-03 09:50:14.720658",
  "module": "HIS",
  "name": "Daily Follow Up",
  "script": "frappe.ui.form.on(\"Daily Follow Up\", {\r\n  refresh(frm) {\r\n    //   Airway\r\n    if (frm.fields_dict[\"airway1\"] && frm.fields_dict[\"airway1\"].grid) {\r\n      setTimeout(() => {\r\n        frm.fields_dict[\"airway1\"].grid.wrapper.find('.grid-add-row').hide();\r\n        frm.fields_dict[\"airway1\"].grid.wrapper.find('.grid-footer').hide();\r\n      }, 500);\r\n    }\r\n    \r\n    if (frm.fields_dict[\"airway2\"] && frm.fields_dict[\"airway2\"].grid) {\r\n      setTimeout(() => {\r\n        frm.fields_dict[\"airway2\"].grid.wrapper.find('.grid-add-row').hide();\r\n        frm.fields_dict[\"airway2\"].grid.wrapper.find('.grid-footer').hide();\r\n      }, 500);\r\n    }\r\n    \r\n    if (frm.fields_dict[\"airway3\"] && frm.fields_dict[\"airway3\"].grid) {\r\n      setTimeout(() => {\r\n        frm.fields_dict[\"airway3\"].grid.wrapper.find('.grid-add-row').hide();\r\n        frm.fields_dict[\"airway3\"].grid.wrapper.find('.grid-footer').hide();\r\n      }, 500);\r\n    }\r\n    \r\n    if (frm.fields_dict[\"airway4\"] && frm.fields_dict[\"airway4\"].grid) {\r\n      setTimeout(() => {\r\n        frm.fields_dict[\"airway4\"].grid.wrapper.find('.grid-add-row').hide();\r\n        frm.fields_dict[\"airway4\"].grid.wrapper.find('.grid-footer').hide();\r\n      }, 500);\r\n    }\r\n    // Airway\r\n    \r\n    //   Breathing\r\n    if (frm.fields_dict[\"breathing1\"] && frm.fields_dict[\"breathing1\"].grid) {\r\n      setTimeout(() => {\r\n        frm.fields_dict[\"breathing1\"].grid.wrapper.find('.grid-add-row').hide();\r\n        frm.fields_dict[\"breathing1\"].grid.wrapper.find('.grid-footer').hide();\r\n      }, 500);\r\n    }\r\n    if (frm.fields_dict[\"breathing9\"] && frm.fields_dict[\"breathing9\"].grid) {\r\n      setTimeout(() => {\r\n        frm.fields_dict[\"breathing9\"].grid.wrapper.find('.grid-add-row').hide();\r\n        frm.fields_dict[\"breathing9\"].grid.wrapper.find('.grid-footer').hide();\r\n      }, 500);\r\n    }\r\n    if (frm.fields_dict[\"breathing2\"] && frm.fields_dict[\"breathing2\"].grid) {\r\n      setTimeout(() => {\r\n        frm.fields_dict[\"breathing2\"].grid.wrapper.find('.grid-add-row').hide();\r\n        frm.fields_dict[\"breathing2\"].grid.wrapper.find('.grid-footer').hide();\r\n      }, 500);\r\n    }\r\n    if (frm.fields_dict[\"breathing3\"] && frm.fields_dict[\"breathing3\"].grid) {\r\n      setTimeout(() => {\r\n        frm.fields_dict[\"breathing3\"].grid.wrapper.find('.grid-add-row').hide();\r\n        frm.fields_dict[\"breathing3\"].grid.wrapper.find('.grid-footer').hide();\r\n      }, 500);\r\n    }\r\n    if (frm.fields_dict[\"breathing4\"] && frm.fields_dict[\"breathing4\"].grid) {\r\n      setTimeout(() => {\r\n        frm.fields_dict[\"breathing4\"].grid.wrapper.find('.grid-add-row').hide();\r\n        frm.fields_dict[\"breathing4\"].grid.wrapper.find('.grid-footer').hide();\r\n      }, 500);\r\n    }\r\n    if (frm.fields_dict[\"breathing5\"] && frm.fields_dict[\"breathing5\"].grid) {\r\n      setTimeout(() => {\r\n        frm.fields_dict[\"breathing5\"].grid.wrapper.find('.grid-add-row').hide();\r\n        frm.fields_dict[\"breathing5\"].grid.wrapper.find('.grid-footer').hide();\r\n      }, 500);\r\n    }\r\n    if (frm.fields_dict[\"breathing6\"] && frm.fields_dict[\"breathing6\"].grid) {\r\n      setTimeout(() => {\r\n        frm.fields_dict[\"breathing6\"].grid.wrapper.find('.grid-add-row').hide();\r\n        frm.fields_dict[\"breathing6\"].grid.wrapper.find('.grid-footer').hide();\r\n      }, 500);\r\n    }\r\n    if (frm.fields_dict[\"breathing7\"] && frm.fields_dict[\"breathing7\"].grid) {\r\n      setTimeout(() => {\r\n        frm.fields_dict[\"breathing7\"].grid.wrapper.find('.grid-add-row').hide();\r\n        frm.fields_dict[\"breathing7\"].grid.wrapper.find('.grid-footer').hide();\r\n      }, 500);\r\n    }\r\n    // Breathing\r\n    \r\n    // Circulation\r\n    if (frm.fields_dict[\"circulation\"] && frm.fields_dict[\"circulation\"].grid) {\r\n      setTimeout(() => {\r\n        frm.fields_dict[\"circulation\"].grid.wrapper.find('.grid-add-row').hide();\r\n        frm.fields_dict[\"circulation\"].grid.wrapper.find('.grid-footer').hide();\r\n      }, 500);\r\n    }\r\n    if (frm.fields_dict[\"circulation2\"] && frm.fields_dict[\"circulation2\"].grid) {\r\n      setTimeout(() => {\r\n        frm.fields_dict[\"circulation2\"].grid.wrapper.find('.grid-add-row').hide();\r\n        frm.fields_dict[\"circulation2\"].grid.wrapper.find('.grid-footer').hide();\r\n      }, 500);\r\n    }\r\n    if (frm.fields_dict[\"circulation3\"] && frm.fields_dict[\"circulation3\"].grid) {\r\n      setTimeout(() => {\r\n        frm.fields_dict[\"circulation3\"].grid.wrapper.find('.grid-add-row').hide();\r\n        frm.fields_dict[\"circulation3\"].grid.wrapper.find('.grid-footer').hide();\r\n      }, 500);\r\n    }\r\n    if (frm.fields_dict[\"circulation4\"] && frm.fields_dict[\"circulation4\"].grid) {\r\n      setTimeout(() => {\r\n        frm.fields_dict[\"circulation4\"].grid.wrapper.find('.grid-add-row').hide();\r\n        frm.fields_dict[\"circulation4\"].grid.wrapper.find('.grid-footer').hide();\r\n      }, 500);\r\n    }\r\n    if (frm.fields_dict[\"circulation5\"] && frm.fields_dict[\"circulation5\"].grid) {\r\n      setTimeout(() => {\r\n        frm.fields_dict[\"circulation5\"].grid.wrapper.find('.grid-add-row').hide();\r\n        frm.fields_dict[\"circulation5\"].grid.wrapper.find('.grid-footer').hide();\r\n      }, 500);\r\n    }\r\n    if (frm.fields_dict[\"circulation6\"] && frm.fields_dict[\"circulation6\"].grid) {\r\n      setTimeout(() => {\r\n        frm.fields_dict[\"circulation6\"].grid.wrapper.find('.grid-add-row').hide();\r\n        frm.fields_dict[\"circulation6\"].grid.wrapper.find('.grid-footer').hide();\r\n      }, 500);\r\n    }\r\n    if (frm.fields_dict[\"circulation7\"] && frm.fields_dict[\"circulation7\"].grid) {\r\n      setTimeout(() => {\r\n        frm.fields_dict[\"circulation7\"].grid.wrapper.find('.grid-add-row').hide();\r\n        frm.fields_dict[\"circulation7\"].grid.wrapper.find('.grid-footer').hide();\r\n      }, 500);\r\n    }\r\n    if (frm.fields_dict[\"circulation8\"] && frm.fields_dict[\"circulation8\"].grid) {\r\n      setTimeout(() => {\r\n        frm.fields_dict[\"circulation8\"].grid.wrapper.find('.grid-add-row').hide();\r\n        frm.fields_dict[\"circulation8\"].grid.wrapper.find('.grid-footer').hide();\r\n      }, 500);\r\n    }\r\n    // Circulation\r\n    \r\n    // Nervous System\r\n    if (frm.fields_dict[\"nervous_system\"] && frm.fields_dict[\"nervous_system\"].grid) {\r\n      setTimeout(() => {\r\n        frm.fields_dict[\"nervous_system\"].grid.wrapper.find('.grid-add-row').hide();\r\n        frm.fields_dict[\"nervous_system\"].grid.wrapper.find('.grid-footer').hide();\r\n      }, 500);\r\n    }\r\n    if (frm.fields_dict[\"nervous_system2\"] && frm.fields_dict[\"nervous_system2\"].grid) {\r\n      setTimeout(() => {\r\n        frm.fields_dict[\"nervous_system2\"].grid.wrapper.find('.grid-add-row').hide();\r\n        frm.fields_dict[\"nervous_system2\"].grid.wrapper.find('.grid-footer').hide();\r\n      }, 500);\r\n    }\r\n    if (frm.fields_dict[\"nervous_system3\"] && frm.fields_dict[\"nervous_system3\"].grid) {\r\n      setTimeout(() => {\r\n        frm.fields_dict[\"nervous_system3\"].grid.wrapper.find('.grid-add-row').hide();\r\n        frm.fields_dict[\"nervous_system3\"].grid.wrapper.find('.grid-footer').hide();\r\n      }, 500);\r\n    }\r\n    if (frm.fields_dict[\"nervous_system4\"] && frm.fields_dict[\"nervous_system4\"].grid) {\r\n      setTimeout(() => {\r\n        frm.fields_dict[\"nervous_system4\"].grid.wrapper.find('.grid-add-row').hide();\r\n        frm.fields_dict[\"nervous_system4\"].grid.wrapper.find('.grid-footer').hide();\r\n      }, 500);\r\n    }\r\n    // Nervous System\r\n    \r\n    // Kidney\r\n    if (frm.fields_dict[\"kidney\"] && frm.fields_dict[\"kidney\"].grid) {\r\n      setTimeout(() => {\r\n        frm.fields_dict[\"kidney\"].grid.wrapper.find('.grid-add-row').hide();\r\n        frm.fields_dict[\"kidney\"].grid.wrapper.find('.grid-footer').hide();\r\n      }, 500);\r\n    }\r\n    if (frm.fields_dict[\"kidney2\"] && frm.fields_dict[\"kidney2\"].grid) {\r\n      setTimeout(() => {\r\n        frm.fields_dict[\"kidney2\"].grid.wrapper.find('.grid-add-row').hide();\r\n        frm.fields_dict[\"kidney2\"].grid.wrapper.find('.grid-footer').hide();\r\n      }, 500);\r\n    }\r\n    if (frm.fields_dict[\"kidney3\"] && frm.fields_dict[\"kidney3\"].grid) {\r\n      setTimeout(() => {\r\n        frm.fields_dict[\"kidney3\"].grid.wrapper.find('.grid-add-row').hide();\r\n        frm.fields_dict[\"kidney3\"].grid.wrapper.find('.grid-footer').hide();\r\n      }, 500);\r\n    }\r\n    if (frm.fields_dict[\"kidney4\"] && frm.fields_dict[\"kidney4\"].grid) {\r\n      setTimeout(() => {\r\n        frm.fields_dict[\"kidney4\"].grid.wrapper.find('.grid-add-row').hide();\r\n        frm.fields_dict[\"kidney4\"].grid.wrapper.find('.grid-footer').hide();\r\n      }, 500);\r\n    }\r\n    // Kidney\r\n    \r\n    // Feeding\r\n    if (frm.fields_dict[\"feeding\"] && frm.fields_dict[\"feeding\"].grid) {\r\n      setTimeout(() => {\r\n        frm.fields_dict[\"feeding\"].grid.wrapper.find('.grid-add-row').hide();\r\n        frm.fields_dict[\"feeding\"].grid.wrapper.find('.grid-footer').hide();\r\n      }, 500);\r\n    }\r\n    if (frm.fields_dict[\"feeding2\"] && frm.fields_dict[\"feeding2\"].grid) {\r\n      setTimeout(() => {\r\n        frm.fields_dict[\"feeding2\"].grid.wrapper.find('.grid-add-row').hide();\r\n        frm.fields_dict[\"feeding2\"].grid.wrapper.find('.grid-footer').hide();\r\n      }, 500);\r\n    }\r\n    if (frm.fields_dict[\"feeding3\"] && frm.fields_dict[\"feeding3\"].grid) {\r\n      setTimeout(() => {\r\n        frm.fields_dict[\"feeding3\"].grid.wrapper.find('.grid-add-row').hide();\r\n        frm.fields_dict[\"feeding3\"].grid.wrapper.find('.grid-footer').hide();\r\n      }, 500);\r\n    }\r\n    if (frm.fields_dict[\"feeding4\"] && frm.fields_dict[\"feeding4\"].grid) {\r\n      setTimeout(() => {\r\n        frm.fields_dict[\"feeding4\"].grid.wrapper.find('.grid-add-row').hide();\r\n        frm.fields_dict[\"feeding4\"].grid.wrapper.find('.grid-footer').hide();\r\n      }, 500);\r\n    }\r\n    // if (frm.fields_dict[\"feeding5\"] && frm.fields_dict[\"feeding5\"].grid) {\r\n    //   setTimeout(() => {\r\n    //     frm.fields_dict[\"feeding5\"].grid.wrapper.find('.grid-add-row').hide();\r\n    //     frm.fields_dict[\"feeding5\"].grid.wrapper.find('.grid-footer').hide();\r\n    //   }, 500);\r\n    // }\r\n    // if (frm.fields_dict[\"feeding_6\"] && frm.fields_dict[\"feeding_6\"].grid) {\r\n    //   setTimeout(() => {\r\n    //     frm.fields_dict[\"feeding_6\"].grid.wrapper.find('.grid-add-row').hide();\r\n    //     frm.fields_dict[\"feeding_6\"].grid.wrapper.find('.grid-footer').hide();\r\n    //   }, 500);\r\n    // }\r\n    // Feeding\r\n    \r\n    \r\n    // Hematology\r\n    if (frm.fields_dict[\"hematology\"] && frm.fields_dict[\"hematology\"].grid) {\r\n      setTimeout(() => {\r\n        frm.fields_dict[\"hematology\"].grid.wrapper.find('.grid-add-row').hide();\r\n        frm.fields_dict[\"hematology\"].grid.wrapper.find('.grid-footer').hide();\r\n      }, 500);\r\n    }\r\n    if (frm.fields_dict[\"hematology2\"] && frm.fields_dict[\"hematology2\"].grid) {\r\n      setTimeout(() => {\r\n        frm.fields_dict[\"hematology2\"].grid.wrapper.find('.grid-add-row').hide();\r\n        frm.fields_dict[\"hematology2\"].grid.wrapper.find('.grid-footer').hide();\r\n      }, 500);\r\n    }\r\n    // Hematology\r\n    \r\n    // Sepsis\r\n    if (frm.fields_dict[\"sepsis\"] && frm.fields_dict[\"sepsis\"].grid) {\r\n      setTimeout(() => {\r\n        frm.fields_dict[\"sepsis\"].grid.wrapper.find('.grid-add-row').hide();\r\n        frm.fields_dict[\"sepsis\"].grid.wrapper.find('.grid-footer').hide();\r\n      }, 500);\r\n    }\r\n    if (frm.fields_dict[\"sepsis2\"] && frm.fields_dict[\"sepsis2\"].grid) {\r\n      setTimeout(() => {\r\n        frm.fields_dict[\"sepsis2\"].grid.wrapper.find('.grid-add-row').hide();\r\n        frm.fields_dict[\"sepsis2\"].grid.wrapper.find('.grid-footer').hide();\r\n      }, 500);\r\n    }\r\n    if (frm.fields_dict[\"sepsis3\"] && frm.fields_dict[\"sepsis3\"].grid) {\r\n      setTimeout(() => {\r\n        frm.fields_dict[\"sepsis3\"].grid.wrapper.find('.grid-add-row').hide();\r\n        frm.fields_dict[\"sepsis3\"].grid.wrapper.find('.grid-footer').hide();\r\n      }, 500);\r\n    }\r\n    // if (frm.fields_dict[\"sepsis4\"] && frm.fields_dict[\"sepsis4\"].grid) {\r\n    //   setTimeout(() => {\r\n    //     frm.fields_dict[\"sepsis4\"].grid.wrapper.find('.grid-add-row').hide();\r\n    //     frm.fields_dict[\"sepsis4\"].grid.wrapper.find('.grid-footer').hide();\r\n    //   }, 500);\r\n    // }\r\n    // Sepsis\r\n    \r\n    // Patient Care\r\n    if (frm.fields_dict[\"patient_care\"] && frm.fields_dict[\"patient_care\"].grid) {\r\n      setTimeout(() => {\r\n        frm.fields_dict[\"patient_care\"].grid.wrapper.find('.grid-add-row').hide();\r\n        frm.fields_dict[\"patient_care\"].grid.wrapper.find('.grid-footer').hide();\r\n      }, 500);\r\n    }\r\n    if (frm.fields_dict[\"patient_care2\"] && frm.fields_dict[\"patient_care2\"].grid) {\r\n      setTimeout(() => {\r\n        frm.fields_dict[\"patient_care2\"].grid.wrapper.find('.grid-add-row').hide();\r\n        frm.fields_dict[\"patient_care2\"].grid.wrapper.find('.grid-footer').hide();\r\n      }, 500);\r\n    }\r\n    if (frm.fields_dict[\"patient_care3\"] && frm.fields_dict[\"patient_care3\"].grid) {\r\n      setTimeout(() => {\r\n        frm.fields_dict[\"patient_care3\"].grid.wrapper.find('.grid-add-row').hide();\r\n        frm.fields_dict[\"patient_care3\"].grid.wrapper.find('.grid-footer').hide();\r\n      }, 500);\r\n    }\r\n    // if (frm.fields_dict[\"patient_care4\"] && frm.fields_dict[\"patient_care4\"].grid) {\r\n    //   setTimeout(() => {\r\n    //     frm.fields_dict[\"patient_care4\"].grid.wrapper.find('.grid-add-row').hide();\r\n    //     frm.fields_dict[\"patient_care4\"].grid.wrapper.find('.grid-footer').hide();\r\n    //   }, 500);\r\n    // }\r\n    // Patient Care\r\n    \r\n    // Problem list \r\n    // if (frm.fields_dict[\"problem_list\"] && frm.fields_dict[\"problem_list\"].grid) {\r\n    //   setTimeout(() => {\r\n    //     frm.fields_dict[\"problem_list\"].grid.wrapper.find('.grid-add-row').hide();\r\n    //     frm.fields_dict[\"problem_list\"].grid.wrapper.find('.grid-footer').hide();\r\n    //   }, 500);\r\n    // }\r\n    // Problem list \r\n    \r\n    // Plan of Management \r\n    if (frm.fields_dict[\"plan_of_management\"] && frm.fields_dict[\"plan_of_management\"].grid) {\r\n      setTimeout(() => {\r\n        frm.fields_dict[\"plan_of_management\"].grid.wrapper.find('.grid-add-row').hide();\r\n        frm.fields_dict[\"plan_of_management\"].grid.wrapper.find('.grid-footer').hide();\r\n      }, 500);\r\n    }\r\n    if (frm.fields_dict[\"plan_of_management2\"] && frm.fields_dict[\"plan_of_management2\"].grid) {\r\n      setTimeout(() => {\r\n        frm.fields_dict[\"plan_of_management2\"].grid.wrapper.find('.grid-add-row').hide();\r\n        frm.fields_dict[\"plan_of_management2\"].grid.wrapper.find('.grid-footer').hide();\r\n      }, 500);\r\n    }\r\n    if (frm.fields_dict[\"plan_of_management3\"] && frm.fields_dict[\"plan_of_management3\"].grid) {\r\n      setTimeout(() => {\r\n        frm.fields_dict[\"plan_of_management3\"].grid.wrapper.find('.grid-add-row').hide();\r\n        frm.fields_dict[\"plan_of_management3\"].grid.wrapper.find('.grid-footer').hide();\r\n      }, 500);\r\n    }\r\n    if (frm.fields_dict[\"plan_of_management4\"] && frm.fields_dict[\"plan_of_management4\"].grid) {\r\n      setTimeout(() => {\r\n        frm.fields_dict[\"plan_of_management4\"].grid.wrapper.find('.grid-add-row').hide();\r\n        frm.fields_dict[\"plan_of_management4\"].grid.wrapper.find('.grid-footer').hide();\r\n      }, 500);\r\n    }\r\n    // Plan of Management \r\n    \r\n    // Target \r\n    if (frm.fields_dict[\"target\"] && frm.fields_dict[\"target\"].grid) {\r\n      setTimeout(() => {\r\n        frm.fields_dict[\"target\"].grid.wrapper.find('.grid-add-row').hide();\r\n        frm.fields_dict[\"target\"].grid.wrapper.find('.grid-footer').hide();\r\n      }, 500);\r\n    }\r\n    // Target \r\n    \r\n    // If the document is new and the child table `airway1` is empty, add a single blank row\r\n    // if (\r\n    //   frm.is_new() &&\r\n    //   (!frm.doc.airway1 || frm.doc.airway1.length === 0) &&\r\n    //   (!frm.doc.airway2 || frm.doc.airway1.length === 0) &&\r\n    //   (!frm.doc.airway3 || frm.doc.airway1.length === 0)  &&\r\n    //   (!frm.doc.breathing1 || frm.doc.breathing1.length === 0) &&\r\n    //   (!frm.doc.breathing2 || frm.doc.breathing2.length === 0) &&\r\n    //   (!frm.doc.breathing3 || frm.doc.breathing3.length === 0) &&\r\n    //   (!frm.doc.breathing4 || frm.doc.breathing4.length === 0) \r\n    // ) {\r\n        // Airway\r\n      frm.add_child(\"airway1\");        // Adds one empty row\r\n      frm.refresh_field(\"airway1\");    // Refreshes the field so the row is visible\r\n      \r\n      frm.add_child(\"airway2\");        // Adds one empty row\r\n      frm.refresh_field(\"airway2\");    // Refreshes the field so the row is visible\r\n      \r\n      frm.add_child(\"airway3\");        // Adds one empty row\r\n      frm.refresh_field(\"airway3\");    // Refreshes the field so the row is visible\r\n      \r\n      frm.add_child(\"airway4\");        // Adds one empty row\r\n      frm.refresh_field(\"airway4\");    // Refreshes the field so the row is visible\r\n    //   Airway\r\n      \r\n    //   Breathing\r\n      frm.add_child(\"breathing1\");        // Adds one empty row\r\n      frm.refresh_field(\"breathing1\");    // Refreshes the field so the row is visible\r\n      frm.add_child(\"breathing9\");        // Adds one empty row\r\n      frm.refresh_field(\"breathing9\");    // Refreshes the field so the row is visible\r\n      \r\n      frm.add_child(\"breathing2\");        // Adds one empty row\r\n      frm.refresh_field(\"breathing2\");    // Refreshes the field so the row is visible\r\n      \r\n      frm.add_child(\"breathing3\");        // Adds one empty row\r\n      frm.refresh_field(\"breathing3\");    // Refreshes the field so the row is visible\r\n      \r\n      frm.add_child(\"breathing4\");        // Adds one empty row\r\n      frm.refresh_field(\"breathing4\");    // Refreshes the field so the row is visible\r\n      \r\n      frm.add_child(\"breathing5\");        // Adds one empty row\r\n      frm.refresh_field(\"breathing5\");    // Refreshes the field so the row is visible\r\n      \r\n      frm.add_child(\"breathing6\");        // Adds one empty row\r\n      frm.refresh_field(\"breathing6\");    // Refreshes the field so the row is visible\r\n      \r\n      frm.add_child(\"breathing7\");        // Adds one empty row\r\n      frm.refresh_field(\"breathing7\");    // Refreshes the field so the row is visible\r\n    //   Breathing\r\n      \r\n    //   Circulation\r\n      frm.add_child(\"circulation\");        // Adds one empty row\r\n      frm.refresh_field(\"circulation\");    // Refreshes the field so the row is visible\r\n      \r\n      frm.add_child(\"circulation2\");        // Adds one empty row\r\n      frm.refresh_field(\"circulation2\");    // Refreshes the field so the row is visible\r\n      \r\n      frm.add_child(\"circulation3\");        // Adds one empty row\r\n      frm.refresh_field(\"circulation3\");    // Refreshes the field so the row is visible\r\n      \r\n      frm.add_child(\"circulation4\");        // Adds one empty row\r\n      frm.refresh_field(\"circulation4\");    // Refreshes the field so the row is visible\r\n      \r\n      frm.add_child(\"circulation5\");        // Adds one empty row\r\n      frm.refresh_field(\"circulation5\");    // Refreshes the field so the row is visible\r\n      \r\n      frm.add_child(\"circulation6\");        // Adds one empty row\r\n      frm.refresh_field(\"circulation6\");    // Refreshes the field so the row is visible\r\n      \r\n      frm.add_child(\"circulation7\");        // Adds one empty row\r\n      frm.refresh_field(\"circulation7\");    // Refreshes the field so the row is visible\r\n      \r\n      frm.add_child(\"circulation8\");        // Adds one empty row\r\n      frm.refresh_field(\"circulation8\");    // Refreshes the field so the row is visible\r\n    //   Circulation\r\n      \r\n    // Nervous System\r\n      frm.add_child(\"nervous_system\");        // Adds one empty row\r\n      frm.refresh_field(\"nervous_system\");    // Refreshes the field so the row is visible\r\n      \r\n      frm.add_child(\"nervous_system2\");        // Adds one empty row\r\n      frm.refresh_field(\"nervous_system2\");    // Refreshes the field so the row is visible\r\n      \r\n      frm.add_child(\"nervous_system3\");        // Adds one empty row\r\n      frm.refresh_field(\"nervous_system3\");    // Refreshes the field so the row is visible\r\n      \r\n      frm.add_child(\"nervous_system4\");        // Adds one empty row\r\n      frm.refresh_field(\"nervous_system4\");    // Refreshes the field so the row is visible\r\n    // Nervous System\r\n    \r\n    // Kidney\r\n      frm.add_child(\"kidney\");        // Adds one empty row\r\n      frm.refresh_field(\"kidney\");    // Refreshes the field so the row is visible\r\n      \r\n      frm.add_child(\"kidney2\");        // Adds one empty row\r\n      frm.refresh_field(\"kidney2\");    // Refreshes the field so the row is visible\r\n      \r\n      frm.add_child(\"kidney3\");        // Adds one empty row\r\n      frm.refresh_field(\"kidney3\");    // Refreshes the field so the row is visible\r\n      \r\n      frm.add_child(\"kidney4\");        // Adds one empty row\r\n      frm.refresh_field(\"kidney4\");    // Refreshes the field so the row is visible\r\n    // Kidney\r\n      \r\n    //   Feeding\r\n      frm.add_child(\"feeding\");        // Adds one empty row\r\n      frm.refresh_field(\"feeding\");    // Refreshes the field so the row is visible\r\n      \r\n      frm.add_child(\"feeding2\");        // Adds one empty row\r\n      frm.refresh_field(\"feeding2\");    // Refreshes the field so the row is visible\r\n      \r\n      frm.add_child(\"feeding3\");        // Adds one empty row\r\n      frm.refresh_field(\"feeding3\");    // Refreshes the field so the row is visible\r\n      \r\n      frm.add_child(\"feeding4\");        // Adds one empty row\r\n      frm.refresh_field(\"feeding4\");    // Refreshes the field so the row is visible\r\n      \r\n    //   frm.add_child(\"feeding5\");        // Adds one empty row\r\n    //   frm.refresh_field(\"feeding5\");    // Refreshes the field so the row is visible\r\n      \r\n    //   frm.add_child(\"feeding_6\");        // Adds one empty row\r\n    //   frm.refresh_field(\"feeding_6\");    // Refreshes the field so the row is visible\r\n    // Feeding\r\n      \r\n    // Hematology\r\n      frm.add_child(\"hematology\");        // Adds one empty row\r\n      frm.refresh_field(\"hematology\");    // Refreshes the field so the row is visible\r\n      \r\n      frm.add_child(\"hematology2\");        // Adds one empty row\r\n      frm.refresh_field(\"hematology2\");    // Refreshes the field so the row is visible\r\n    // Hematology\r\n      \r\n    // Sepsis\r\n      frm.add_child(\"sepsis\");        // Adds one empty row\r\n      frm.refresh_field(\"sepsis\");    // Refreshes the field so the row is visible\r\n      \r\n      frm.add_child(\"sepsis2\");        // Adds one empty row\r\n      frm.refresh_field(\"sepsis2\");    // Refreshes the field so the row is visible\r\n      \r\n      frm.add_child(\"sepsis3\");        // Adds one empty row\r\n      frm.refresh_field(\"sepsis3\");    // Refreshes the field so the row is visible\r\n      \r\n    //   frm.add_child(\"sepsis4\");        // Adds one empty row\r\n    //   frm.refresh_field(\"sepsis4\");    // Refreshes the field so the row is visible\r\n    // Sepsis\r\n    \r\n    // Patient Care\r\n      frm.add_child(\"patient_care\");        // Adds one empty row\r\n      frm.refresh_field(\"patient_care\");    // Refreshes the field so the row is visible\r\n      \r\n      frm.add_child(\"patient_care2\");        // Adds one empty row\r\n      frm.refresh_field(\"patient_care2\");    // Refreshes the field so the row is visible\r\n      \r\n      frm.add_child(\"patient_care3\");        // Adds one empty row\r\n      frm.refresh_field(\"patient_care3\");    // Refreshes the field so the row is visible\r\n      \r\n    //   frm.add_child(\"patient_care4\");        // Adds one empty row\r\n    //   frm.refresh_field(\"patient_care4\");    // Refreshes the field so the row is visible\r\n    // Patient Care\r\n    \r\n    // Problem list\r\n      frm.add_child(\"problem_list\");        // Adds one empty row\r\n      frm.refresh_field(\"problem_list\");    // Refreshes the field so the row is visible\r\n    // Problem list\r\n    \r\n    // To do list\r\n      frm.add_child(\"to_do_list\");        // Adds one empty row\r\n      frm.refresh_field(\"to_do_list\");    // Refreshes the field so the row is visible\r\n    // To do list\r\n    \r\n    // Plan of Management\r\n      frm.add_child(\"plan_of_management\");        // Adds one empty row\r\n      frm.refresh_field(\"plan_of_management\");    // Refreshes the field so the row is visible\r\n      \r\n      frm.add_child(\"plan_of_management2\");        // Adds one empty row\r\n      frm.refresh_field(\"plan_of_management2\");    // Refreshes the field so the row is visible\r\n      \r\n      frm.add_child(\"plan_of_management3\");        // Adds one empty row\r\n      frm.refresh_field(\"plan_of_management3\");    // Refreshes the field so the row is visible\r\n      \r\n      frm.add_child(\"plan_of_management4\");        // Adds one empty row\r\n      frm.refresh_field(\"plan_of_management4\");    // Refreshes the field so the row is visible\r\n    // Plan of Management\r\n      \r\n    // Target\r\n      frm.add_child(\"target\");        // Adds one empty row\r\n      frm.refresh_field(\"target\");    // Refreshes the field so the row is visible\r\n    // Target\r\n    // }\r\n  }\r\n});\r\n\r\n\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Dental Plan",
  "enabled": 0,
  "modified": "2025-03-03 09:50:14.843260",
  "module": "HIS",
  "name": "Dental Plan Rate Hidden",
  "script": "frappe.ui.form.on(\"Dental Plan\", {\n    refresh: function(frm) {\n        if (frm.fields_dict[\"dental_plan_details\"]) {\n            let hide_field = !frappe.user_roles.includes(\"HR XX\");\n            \n            // Hide the \"rate\" column completely from the grid\n            frm.fields_dict[\"dental_plan_details\"].grid.update_docfield_property(\"rate\", \"hidden\", hide_field);\n\n            // Refresh the grid to apply the change\n            frm.fields_dict[\"dental_plan_details\"].grid.refresh();\n        }\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Admission",
  "enabled": 1,
  "modified": "2025-03-03 09:50:14.764883",
  "module": "HIS",
  "name": "Admission",
  "script": "frappe.ui.form.on(\"Admission\", {\r\n  refresh(frm) {\r\n    // Examination \r\n    if (frm.fields_dict[\"examination\"] && frm.fields_dict[\"examination\"].grid) {\r\n      setTimeout(() => {\r\n        frm.fields_dict[\"examination\"].grid.wrapper.find('.grid-add-row').hide();\r\n        frm.fields_dict[\"examination\"].grid.wrapper.find('.grid-footer').hide();\r\n      }, 500);\r\n    }\r\n    if (frm.fields_dict[\"examination2\"] && frm.fields_dict[\"examination2\"].grid) {\r\n      setTimeout(() => {\r\n        frm.fields_dict[\"examination2\"].grid.wrapper.find('.grid-add-row').hide();\r\n        frm.fields_dict[\"examination2\"].grid.wrapper.find('.grid-footer').hide();\r\n      }, 500);\r\n    }\r\n    // Examination \r\n    \r\n    // Primary assessment for \r\n    if (frm.fields_dict[\"primary_assessment\"] && frm.fields_dict[\"primary_assessment\"].grid) {\r\n      setTimeout(() => {\r\n        frm.fields_dict[\"primary_assessment\"].grid.wrapper.find('.grid-add-row').hide();\r\n        frm.fields_dict[\"primary_assessment\"].grid.wrapper.find('.grid-footer').hide();\r\n      }, 500);\r\n    }\r\n    // Primary assessment for \r\n    \r\n    // SNS examination \r\n    if (frm.fields_dict[\"systemic_review\"] && frm.fields_dict[\"systemic_review\"].grid) {\r\n      setTimeout(() => {\r\n        frm.fields_dict[\"systemic_review\"].grid.wrapper.find('.grid-add-row').hide();\r\n        frm.fields_dict[\"systemic_review\"].grid.wrapper.find('.grid-footer').hide();\r\n      }, 500);\r\n    }\r\n    if (frm.fields_dict[\"systemic_review2\"] && frm.fields_dict[\"systemic_review2\"].grid) {\r\n      setTimeout(() => {\r\n        frm.fields_dict[\"systemic_review2\"].grid.wrapper.find('.grid-add-row').hide();\r\n        frm.fields_dict[\"systemic_review2\"].grid.wrapper.find('.grid-footer').hide();\r\n      }, 500);\r\n    }\r\n    // SNS examination \r\n    \r\n    // CVS \r\n    if (frm.fields_dict[\"cvs\"] && frm.fields_dict[\"cvs\"].grid) {\r\n      setTimeout(() => {\r\n        frm.fields_dict[\"cvs\"].grid.wrapper.find('.grid-add-row').hide();\r\n        frm.fields_dict[\"cvs\"].grid.wrapper.find('.grid-footer').hide();\r\n      }, 500);\r\n    }\r\n    // CVS \r\n    \r\n    // Pulmonary \r\n    if (frm.fields_dict[\"pulmonary\"] && frm.fields_dict[\"pulmonary\"].grid) {\r\n      setTimeout(() => {\r\n        frm.fields_dict[\"pulmonary\"].grid.wrapper.find('.grid-add-row').hide();\r\n        frm.fields_dict[\"pulmonary\"].grid.wrapper.find('.grid-footer').hide();\r\n      }, 500);\r\n    }\r\n    if (frm.fields_dict[\"pulmonary2\"] && frm.fields_dict[\"pulmonary2\"].grid) {\r\n      setTimeout(() => {\r\n        frm.fields_dict[\"pulmonary2\"].grid.wrapper.find('.grid-add-row').hide();\r\n        frm.fields_dict[\"pulmonary2\"].grid.wrapper.find('.grid-footer').hide();\r\n      }, 500);\r\n    }\r\n    // Pulmonary \r\n    \r\n    // Abdomen \r\n    if (frm.fields_dict[\"abdomen\"] && frm.fields_dict[\"abdomen\"].grid) {\r\n      setTimeout(() => {\r\n        frm.fields_dict[\"abdomen\"].grid.wrapper.find('.grid-add-row').hide();\r\n        frm.fields_dict[\"abdomen\"].grid.wrapper.find('.grid-footer').hide();\r\n      }, 500);\r\n    }\r\n    // Abdomen \r\n    \r\n    // Genitourinary \r\n    if (frm.fields_dict[\"genitourinary\"] && frm.fields_dict[\"genitourinary\"].grid) {\r\n      setTimeout(() => {\r\n        frm.fields_dict[\"genitourinary\"].grid.wrapper.find('.grid-add-row').hide();\r\n        frm.fields_dict[\"genitourinary\"].grid.wrapper.find('.grid-footer').hide();\r\n      }, 500);\r\n    }\r\n    // Genitourinary \r\n    \r\n    // Locomotor \r\n    if (frm.fields_dict[\"locomotor\"] && frm.fields_dict[\"locomotor\"].grid) {\r\n      setTimeout(() => {\r\n        frm.fields_dict[\"locomotor\"].grid.wrapper.find('.grid-add-row').hide();\r\n        frm.fields_dict[\"locomotor\"].grid.wrapper.find('.grid-footer').hide();\r\n      }, 500);\r\n    }\r\n    // Locomotor \r\n    \r\n    // Skin \r\n    if (frm.fields_dict[\"skin\"] && frm.fields_dict[\"skin\"].grid) {\r\n      setTimeout(() => {\r\n        frm.fields_dict[\"skin\"].grid.wrapper.find('.grid-add-row').hide();\r\n        frm.fields_dict[\"skin\"].grid.wrapper.find('.grid-footer').hide();\r\n      }, 500);\r\n    }\r\n    // Skin \r\n    \r\n    \r\n    // Investigation results \r\n    if (frm.fields_dict[\"investigation_results\"] && frm.fields_dict[\"investigation_results\"].grid) {\r\n      setTimeout(() => {\r\n        frm.fields_dict[\"investigation_results\"].grid.wrapper.find('.grid-add-row').hide();\r\n        frm.fields_dict[\"investigation_results\"].grid.wrapper.find('.grid-footer').hide();\r\n      }, 500);\r\n    }\r\n    if (frm.fields_dict[\"investigation_results2\"] && frm.fields_dict[\"investigation_results2\"].grid) {\r\n      setTimeout(() => {\r\n        frm.fields_dict[\"investigation_results2\"].grid.wrapper.find('.grid-add-row').hide();\r\n        frm.fields_dict[\"investigation_results2\"].grid.wrapper.find('.grid-footer').hide();\r\n      }, 500);\r\n    }\r\n    // Investigation results \r\n    \r\n    // Problem list \r\n    // if (frm.fields_dict[\"problem_list_for_admission\"] && frm.fields_dict[\"problem_list_for_admission\"].grid) {\r\n    //   setTimeout(() => {\r\n    //     frm.fields_dict[\"problem_list_for_admission\"].grid.wrapper.find('.grid-add-row').hide();\r\n    //     frm.fields_dict[\"problem_list_for_admission\"].grid.wrapper.find('.grid-footer').hide();\r\n    //   }, 500);\r\n    // }\r\n    // Problem list \r\n    \r\n    // To do list  \r\n    // if (frm.fields_dict[\"to_do_list_for_admision\"] && frm.fields_dict[\"to_do_list_for_admision\"].grid) {\r\n    //   setTimeout(() => {\r\n    //     frm.fields_dict[\"to_do_list_for_admision\"].grid.wrapper.find('.grid-add-row').hide();\r\n    //     frm.fields_dict[\"to_do_list_for_admision\"].grid.wrapper.find('.grid-footer').hide();\r\n    //   }, 500);\r\n    // }\r\n    // To do list \r\n    \r\n    // Plan of management \r\n    if (frm.fields_dict[\"plan_of_management_for_admission\"] && frm.fields_dict[\"plan_of_management_for_admission\"].grid) {\r\n      setTimeout(() => {\r\n        frm.fields_dict[\"plan_of_management_for_admission\"].grid.wrapper.find('.grid-add-row').hide();\r\n        frm.fields_dict[\"plan_of_management_for_admission\"].grid.wrapper.find('.grid-footer').hide();\r\n      }, 500);\r\n    }\r\n    if (frm.fields_dict[\"plan_of_management_for_admission2\"] && frm.fields_dict[\"plan_of_management_for_admission2\"].grid) {\r\n      setTimeout(() => {\r\n        frm.fields_dict[\"plan_of_management_for_admission2\"].grid.wrapper.find('.grid-add-row').hide();\r\n        frm.fields_dict[\"plan_of_management_for_admission2\"].grid.wrapper.find('.grid-footer').hide();\r\n      }, 500);\r\n    }\r\n    if (frm.fields_dict[\"plan_of_management_for_admission3\"] && frm.fields_dict[\"plan_of_management_for_admission3\"].grid) {\r\n      setTimeout(() => {\r\n        frm.fields_dict[\"plan_of_management_for_admission3\"].grid.wrapper.find('.grid-add-row').hide();\r\n        frm.fields_dict[\"plan_of_management_for_admission3\"].grid.wrapper.find('.grid-footer').hide();\r\n      }, 500);\r\n    }\r\n    if (frm.fields_dict[\"plan_of_management_for_admission4\"] && frm.fields_dict[\"plan_of_management_for_admission4\"].grid) {\r\n      setTimeout(() => {\r\n        frm.fields_dict[\"plan_of_management_for_admission4\"].grid.wrapper.find('.grid-add-row').hide();\r\n        frm.fields_dict[\"plan_of_management_for_admission4\"].grid.wrapper.find('.grid-footer').hide();\r\n      }, 500);\r\n    }\r\n    // Plan of management \r\n    \r\n    // Target \r\n    if (frm.fields_dict[\"target_for_admission\"] && frm.fields_dict[\"target_for_admission\"].grid) {\r\n      setTimeout(() => {\r\n        frm.fields_dict[\"target_for_admission\"].grid.wrapper.find('.grid-add-row').hide();\r\n        frm.fields_dict[\"target_for_admission\"].grid.wrapper.find('.grid-footer').hide();\r\n      }, 500);\r\n    }\r\n    // Target \r\n    \r\n      \r\n    // Examination\r\n      frm.add_child(\"examination\");        // Adds one empty row\r\n      frm.refresh_field(\"examination\");    // Refreshes the field so the row is visible\r\n      frm.add_child(\"examination2\");        // Adds one empty row\r\n      frm.refresh_field(\"examination2\");    // Refreshes the field so the row is visible\r\n    // Examination\r\n    \r\n    // Primary assessment for\r\n      frm.add_child(\"primary_assessment\");        // Adds one empty row\r\n      frm.refresh_field(\"primary_assessment\");    // Refreshes the field so the row is visible\r\n    // Primary assessment for\r\n    \r\n    // SNS examination \r\n      frm.add_child(\"systemic_review\");        // Adds one empty row\r\n      frm.refresh_field(\"systemic_review\");    // Refreshes the field so the row is visible\r\n      frm.add_child(\"systemic_review2\");        // Adds one empty row\r\n      frm.refresh_field(\"systemic_review2\");    // Refreshes the field so the row is visible\r\n    // SNS examination \r\n    \r\n    // CVS\r\n      frm.add_child(\"cvs\");        // Adds one empty row\r\n      frm.refresh_field(\"cvs\");    // Refreshes the field so the row is visible\r\n    // CVS\r\n    \r\n    // Pulmonary\r\n      frm.add_child(\"pulmonary\");        // Adds one empty row\r\n      frm.refresh_field(\"pulmonary\");    // Refreshes the field so the row is visible\r\n      frm.add_child(\"pulmonary2\");        // Adds one empty row\r\n      frm.refresh_field(\"pulmonary2\");    // Refreshes the field so the row is visible\r\n    // Pulmonary\r\n    \r\n    // Abdomen\r\n      frm.add_child(\"abdomen\");        // Adds one empty row\r\n      frm.refresh_field(\"abdomen\");    // Refreshes the field so the row is visible\r\n    // Abdomen\r\n    \r\n    // Genitourinary\r\n      frm.add_child(\"genitourinary\");        // Adds one empty row\r\n      frm.refresh_field(\"genitourinary\");    // Refreshes the field so the row is visible\r\n    // Genitourinary\r\n    \r\n    // Locomotor\r\n      frm.add_child(\"locomotor\");        // Adds one empty row\r\n      frm.refresh_field(\"locomotor\");    // Refreshes the field so the row is visible\r\n    // Locomotor\r\n    \r\n    // Skin\r\n      frm.add_child(\"skin\");        // Adds one empty row\r\n      frm.refresh_field(\"skin\");    // Refreshes the field so the row is visible\r\n    // Skin\r\n    \r\n    // Investigation results\r\n      frm.add_child(\"investigation_results\");        // Adds one empty row\r\n      frm.refresh_field(\"investigation_results\");    // Refreshes the field so the row is visible\r\n      frm.add_child(\"investigation_results2\");        // Adds one empty row\r\n      frm.refresh_field(\"investigation_results2\");    // Refreshes the field so the row is visible\r\n    // Investigation results\r\n    \r\n    // Problem list\r\n      frm.add_child(\"problem_list_for_admission\");        // Adds one empty row\r\n      frm.refresh_field(\"problem_list_for_admission\");    // Refreshes the field so the row is visible\r\n    // Problem list\r\n    \r\n    // To do list \r\n      frm.add_child(\"to_do_list_for_admision\");        // Adds one empty row\r\n      frm.refresh_field(\"to_do_list_for_admision\");    // Refreshes the field so the row is visible\r\n    // To do list \r\n    \r\n    // Plan of management\r\n      frm.add_child(\"plan_of_management_for_admission\");        // Adds one empty row\r\n      frm.refresh_field(\"plan_of_management_for_admission\");    // Refreshes the field so the row is visible\r\n      \r\n      frm.add_child(\"plan_of_management_for_admission2\");        // Adds one empty row\r\n      frm.refresh_field(\"plan_of_management_for_admission2\");    // Refreshes the field so the row is visible\r\n      \r\n      frm.add_child(\"plan_of_management_for_admission3\");        // Adds one empty row\r\n      frm.refresh_field(\"plan_of_management_for_admission3\");    // Refreshes the field so the row is visible\r\n      \r\n      frm.add_child(\"plan_of_management_for_admission4\");        // Adds one empty row\r\n      frm.refresh_field(\"plan_of_management_for_admission4\");    // Refreshes the field so the row is visible\r\n    // Plan of management\r\n    \r\n    // Target\r\n      frm.add_child(\"target_for_admission\");        // Adds one empty row\r\n      frm.refresh_field(\"target_for_admission\");    // Refreshes the field so the row is visible\r\n    // Target\r\n  }\r\n});\r\n\r\n\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Patient Encounter",
  "enabled": 1,
  "modified": "2025-03-03 09:50:14.653903",
  "module": "HIS",
  "name": "Remove Deplicate",
  "script": "frappe.ui.form.on('Patient Encounter', {\n\trefresh(frm) {\n\t\t// your code here\n\t},\n\tpractitioner: function(frm) {\n\t    let hide_field = frm.doc.medical_department != \"Dental\"\n            \n\t\t// Hide the \"rate\" column completely from the grid\n\t\tfrm.fields_dict[\"services_prescription\"].grid.update_docfield_property(\"rate\", \"hidden\", hide_field);\n\n\t\t// Refresh the grid to apply the change\n\t\tfrm.fields_dict[\"services_prescription\"].grid.refresh();\n\t},\n\tbefore_save: function(frm) {\n        var labTestCodes = [];\n        var rowsToRemove = [];\n        if (frm.doc.lab_test_prescription) {\n        frm.doc.lab_test_prescription.forEach(function(childRow, index) {\n            if (labTestCodes.includes(childRow.lab_test_code)) {\n                // Add the duplicate row index to be removed\n                rowsToRemove.push(index);\n            } else {\n                labTestCodes.push(childRow.lab_test_code);\n            }\n        });\n\n        // Remove the duplicate rows\n        rowsToRemove.reverse().forEach(function(index) {\n            frm.doc.lab_test_prescription.splice(index, 1);\n        });\n\n        // If duplicates were found, prevent save\n        if (rowsToRemove.length > 0) {\n            // frappe.msgprint(__('Duplicate Lab Test Code(s) removed.'));\n            frappe.validated = false;\n        }\n        }\n    }\n})\n\nfrappe.ui.form.on('Lab Prescription', {\n        before_lab_test_prescription_remove(frm) {\n        // Loop through the child table to check if 'invoiced' is 'Yes'\n        let invoiced_found = false;\n        \n        frm.doc.lab_test_prescription.forEach(function(row) {\n            if (row.invoiced == 1) {\n                frappe.throw(\"Only cashiers can refund becouse is already Invoiced!!\")\n            }\n        });\n\n        // If 'invoiced' is 'Yes' in any row, update 'total_and__vat'\n       \n    },\n\t lab_test_code: function(frm, cdt, cdn) {\n        var row = frappe.get_doc(cdt, cdn);\n        var duplicateCount = 0;\n\n        frm.doc.lab_test_prescription.forEach(function(childRow) {\n            if (childRow.lab_test_code === row.lab_test_code) {\n                duplicateCount++;\n            }\n        });\n\n        // Remove duplicates except for the first occurrence\n        if (duplicateCount > 1) {\n            var foundDuplicate = false;\n            frm.doc.lab_test_prescription = frm.doc.lab_test_prescription.filter(function(childRow) {\n                if (childRow.lab_test_code === row.lab_test_code) {\n                    if (!foundDuplicate) {\n                        foundDuplicate = true;\n                        return true;\n                    } else {\n                        return \"false\";\n                    }\n                }\n                return \"true\";\n            });\n        }\n\n        // Your code here\n        // Perform other operations after checking for duplicates\n    }\n\t\n})\n\nfrappe.ui.form.on('Drug Prescription', {\n\tdrug_code: function(frm, cdt, cdn) {\n        var row = frappe.get_doc(cdt, cdn);\n        var duplicateCount = 0;\n\n        frm.doc.drug_prescription.forEach(function(childRow) {\n            if (childRow.drug_code === row.drug_code) {\n                duplicateCount++;\n            }\n        });\n\n        // Remove duplicates except for the first occurrence\n        if (duplicateCount > 1) {\n            var foundDuplicate = false;\n            frm.doc.drug_prescription = frm.doc.drug_prescription.filter(function(childRow) {\n                if (childRow.drug_code === row.drug_code) {\n                    if (!foundDuplicate) {\n                        foundDuplicate = true;\n                        return true;\n                    } else {\n                        return false;\n                    }\n                }\n                return true;\n            });\n        }\n\n        // Your code here\n        // Perform other operations after checking for duplicates\n    }\n})\n\nfrappe.ui.form.on('Services Prescription', {\n\tservice: function(frm, cdt, cdn) {\n        let row = locals[cdt][cdn];\n      \n\t\tlet hide_field = frm.doc.medical_department != \"Dental\"\n            \n\t\t// Hide the \"rate\" column completely from the grid\n\t\tfrm.fields_dict[\"services_prescription\"].grid.update_docfield_property(\"rate\", \"hidden\", hide_field);\n\n\t\t// Refresh the grid to apply the change\n\t\tfrm.fields_dict[\"services_prescription\"].grid.refresh();\n    },\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Stock Entry",
  "enabled": 1,
  "modified": "2025-03-03 09:50:14.630527",
  "module": "HIS",
  "name": "Stock Entry Cost Center",
  "script": "frappe.ui.form.on('Stock Entry', {\n\trefresh(frm) {\n\t\t// your code here\n\t},\n\t\tcost_center: function(frm){\n\t    console.log(frm)\n\t     frm.doc.items.forEach(row => {\n            if (row.item_code) {\n                        frappe.model.set_value(row.doctype, row.name, 'cost_center', frm.doc.cost_center);\n            }\n        });\n\t},\n\t\texpense_account :function(frm){\n\t    console.log(frm)\n\t     frm.doc.items.forEach(row => {\n          frappe.model.set_value(row.doctype, row.name, 'expense_account', frm.doc.expense_account);\n            \n        });\n\t},\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "LABOUR DELIVERY  MATERNITY REGISTER",
  "enabled": 0,
  "modified": "2025-05-31 12:19:37.320141",
  "module": "HIS",
  "name": "Delivery_type",
  "script": "frappe.ui.form.on(\"LABOUR DELIVERY  MATERNITY REGISTER\", {\r\n  refresh(frm) {\r\n    if (frm.fields_dict[\"delivery_type_4\"] && frm.fields_dict[\"delivery_type_4\"].grid) {\r\n      setTimeout(() => {\r\n        frm.fields_dict[\"delivery_type_4\"].grid.wrapper.find('.grid-add-row').hide();\r\n        frm.fields_dict[\"delivery_type_4\"].grid.wrapper.find('.grid-footer').hide();\r\n      }, 500);\r\n    }\r\n    \r\n if (\r\n      frm.is_new() &&\r\n      (!frm.doc.delivery_type_4 || frm.doc.delivery_type_4.length === 0)\r\n    ) {\r\n        const row_labels2 = [\"Normal (vaginal)\", \"Assisted / Instrumental (Vacuum / Forceps)\", \"C-Section\"];\r\n    \r\n      row_labels2.forEach(label_val => {\r\n        let row = frm.add_child(\"delivery_type_4\");\r\n        // Assuming your child table has a field named \"label\" or something similar\r\n        row.delivery_rows_fields = label_val;\r\n      });\r\n      frm.refresh_field(\"delivery_type_4\");\r\n    }\r\n      \r\n    \r\n  }\r\n});\r\n\r\n\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Invoice",
  "enabled": 0,
  "modified": "2025-03-09 10:28:23.919502",
  "module": "HIS",
  "name": "Filter Items in Sales Invoice",
  "script": "// frappe.ui.form.on('Sales Invoice', {\n//     refresh(frm) {\n//         frm.set_query('item_code', 'items', function() {\n//             // Check if the current user has the 'Cashier' role\n//             var isCashier = frappe.user_roles.includes('Cashiers');\n\n//             // If the user is a Cashier, filter out 'Drug' items, otherwise show all items\n//             return {\n//                 filters: isCashier \n//                     ? { \"item_group\": [\"!=\", \"Drug\"] } \n//                     : {}  // No filter for non-cashiers\n//             };\n//         });\n//     }\n// });\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Dressing",
  "enabled": 1,
  "modified": "2025-03-04 14:56:23.024407",
  "module": "HIS",
  "name": "Dressing",
  "script": "frappe.ui.form.on('Dressing', {\n\trefresh(frm) {\n\t\t// your code here\n\t\tif(!frm.is_new()){\n\t\t    var btn1 = frm.add_custom_button('Requests', () => {\n\t\t\t\tfrappe.new_doc(\"Healthcare Requests\", { \"patient\": frm.doc.patient, \"practitioner\": frm.doc.practitioner, \"source_order\": \"OPD\" })\n\t\t\n\t\t\t})\n\t\n\t\t\tbtn1.addClass('btn-primary');\n\t\t}\n\t}\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Membership Registration",
  "enabled": 1,
  "modified": "2025-06-23 10:51:25.305784",
  "module": "HIS",
  "name": "Membership Registration",
  "script": "frappe.ui.form.on('Membership Registration', {\n      register_all: function(frm) {\n        // Flag to check if the form should be saved after insertion\n        \n        \n        \n        \n        \n        frappe.confirm('Are you sure you want to proceed?',\n    () => {\n         frm.doc.family_members.forEach(function(loop) {\n            if (loop.visited === 0) {\n                frappe.call({\n                    method: 'frappe.client.insert',\n                    args: {\n                        doc: {\n                            doctype: 'Patient',\n                            first_name: loop.full_name, \n                            mobile_no: loop.mobile,\n                            sex: loop.sex,  \n                            p_age: loop.age,\n                            age_type: loop.age_type,\n                            percentage: 50,\n                            customer_group: \"Membership\",\n                            membership: frm.doc.name,\n                            card: frm.doc.card_number,\n                            member_company: frm.doc.company,\n                            member_contact: frm.doc.contact_number,\n                            member_head: frm.doc.family_head_person\n                            \n                        }\n                    },\n                    callback: function(response) {\n                        if (response.message) {\n                            frappe.msgprint(__('Patient document inserted successfully for ') + loop.full_name);\n                            frappe.db.set_value(\"Family Members\", loop.name, \"visited\", 1);                        }\n                    },\n                    error: function(error) {\n                        frappe.msgprint(__('Error inserting document for ') + loop.full_name);\n                    }\n                });\n            }\n            else{\n    frappe.utils.play_sound(\"submit\")\n    frappe.show_alert({\n        message:__(\"All Members Already Registered!!\"),\n        indicator:\"green\",\n        \n    }, 5);\n            }\n        });\n\n        // Save the form once after all insertions\n      \n    }, () => {\n       \n    })\n\n      \n    },\n    before_save: function(frm){\n        frm.set_value(\"total\", frm.doc.family_members.length);\n    },\n\trefresh(frm) {\n\tconsole.log(frm.doc.name)\n    if (frm.is_new()) {\n        frappe.call({\n            method: 'frappe.client.get_list',\n            args: {\n                doctype: 'Membership Registration',\n                fields: ['card_number'],\n                limit_page_length: 100 // Fetch more records if needed\n            },\n            callback: function(r) {\n                console.log(r.message); // For debugging\n                \n                // Sort the card numbers numerically in descending order\n                r.message.sort(function(a, b) {\n                    // Compare card numbers numerically\n                    return parseInt(b.card_number, 10) - parseInt(a.card_number, 10);\n                });\n\n                if (r.message && r.message.length > 0) {\n                    let last_card_number = parseInt(r.message[0].card_number, 10) || 0;\n\n                    // Log for debugging\n                    console.log('Last Card Number:', last_card_number);\n\n                    frm.set_value('card_number', last_card_number + 1);\n                } else {\n                    frm.set_value('card_number', 1); // Start from 1 if no records exist\n                }\n            }\n        });\n    }\n}\n\n})\n\nfrappe.ui.form.on('Family Members', {\n\trefresh(frm) {\n\t\t// your code here\n\t\n\t\t\n\t},\n\tcreate_patient(frm , cdt , cdn){\n\t    \n\t    \n\t     let row = locals[cdt][cdn];\n\t     frappe.confirm('Are you sure you want to proceed?',\n    () => {\n          if (row.visited === 0) {\n                frappe.call({\n                    method: 'frappe.client.insert',\n                    args: {\n                        doc: {\n                            doctype: 'Patient',\n                             first_name: row.full_name, \n                            mobile_no: row.mobile,\n                            sex: row.sex,  \n                            p_age: row.age,\n                            age_type: row.age_type,\n                            percentage: 50,\n                            customer_group: \"Membership\",\n                            card: frm.doc.card_number,\n                            member_company: frm.doc.company,\n                            member_contact: frm.doc.contact_number,\n                            member_head: frm.doc.family_head_person\n                            \n                        }\n                    },\n                    callback: function(response) {\n                        if (response.message) {\n                            frappe.msgprint(__('Patient document inserted successfully for ') + row.full_name);\n                            frappe.db.set_value(\"Family Members\", row.name, \"visited\", 1);                        }\n                    },\n                    error: function(error) {\n                        frappe.msgprint(__('Error inserting document for ') + row.full_name);\n                    }\n                });\n            }\n            else{\n    frappe.utils.play_sound(\"submit\")\n    frappe.show_alert({\n        message:__( row.full_name+ \" Already Registered!! \"),\n        indicator:\"green\",\n        \n    }, 5);\n            }\n\t    \n    }, () => {\n        // action to perform if No is selected\n    })\n\t         \n\t    \n\t    \n\t   // _________________________________________________________end--------------------------\n\n\t  \n    // console.log(row.full_name);\n\n    // frappe.model.with_doctype(\"Patient\", function() {\n    //     let patient = frappe.model.get_new_doc(\"Patient\");\n\n    //     // Set values correctly\n    //     frappe.model.set_value(patient.doctype, patient.name, \"first_name\", row.full_name);\n    //     frappe.model.set_value(patient.doctype, patient.name, \"percentage\", 50);\n    //     frappe.model.set_value(patient.doctype, patient.name, \"mobile_no\", row.mobile);\n    //     frappe.model.set_value(patient.doctype, patient.name, \"sex\", row.sex);\n    //     frappe.model.set_value(patient.doctype, patient.name, \"p_age\", row.age);\n    //     frappe.model.set_value(patient.doctype, patient.name, \"default_price_list\", \"Membership\");\n    //     frappe.model.set_value(patient.doctype, patient.name, \"customer_group\", \"Membership\");\n    //     frappe.model.set_value(patient.doctype, patient.name, \"territory\", row.dr);\n\n    //     // Open the form for user to review\n    //     frappe.set_route(\"Form\", \"Patient\", patient.name);\n    // });\n\t}\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Customer",
  "enabled": 1,
  "modified": "2025-06-29 19:09:05.041578",
  "module": "HIS",
  "name": "Credit limits",
  "script": "frappe.ui.form.on('Customer', {\n\trefresh(frm) {\n\t\t// your code here\n\t}\n})\n\nfrappe.ui.form.on('Customer Credit Limit', {\n\trefresh(frm) {\n\t\t// your code here\n\t},\n\t\tbefore_credit_limits_remove(frm){\n\t   // alert()\n\t   frappe.throw(\"You can't delete please update credit limid balance instead of deletating!\")\n\t   // frm.set_value(\"total_and__vat\", frm.doc.grand_total * 1.05);\n\t},\n\tresponsible: function(frm, cdt, cdn) {\n        update_customer_responsible(frm);\n    },\n    credit_limits_add: function(frm) {\n        update_customer_responsible(frm);\n    },\n    credit_limits_remove: function(frm) {\n        update_customer_responsible(frm);\n    }\n})\n\nfunction update_customer_responsible(frm) {\n    const first_with_responsible = (frm.doc.credit_limits || []).find(row => row.responsible);\n\n    if (first_with_responsible) {\n        // Only set if different\n        if (frm.doc.responsible !== first_with_responsible.responsible) {\n            frm.set_value('responsible', first_with_responsible.responsible);\n        }\n    } else {\n        // No responsible found \u2014 clear the parent field\n        if (frm.doc.responsible) {\n            frm.set_value('responsible', null);\n        }\n    }\n}\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Lab Result",
  "enabled": 1,
  "modified": "2025-08-06 15:53:10.565790",
  "module": "HIS",
  "name": "Lab result on submit",
  "script": "frappe.ui.form.on('Lab Result', {\r\n    validate: function(frm) {\r\n        let incomplete = false;\r\n\r\n        if (frm.doc.normal_test_items && frm.doc.normal_test_items.length > 0) {\r\n            frm.doc.normal_test_items.forEach(row => {\r\n                if (!row.result_value) {\r\n                    incomplete = true;\r\n                }\r\n            });\r\n        }\r\n\r\n        if (incomplete) {\r\n            frappe.msgprint({\r\n                title: __('Missing Data'),\r\n                message: __('Please fill \"Result Value\" field in the Normal Test Results table before submitting.'),\r\n                indicator: 'red'\r\n            });\r\n            return false; // Prevent submission\r\n        }\r\n    }\r\n});\r\n\r\n\r\nfrappe.ui.form.on('Normal Test Result', {\r\n    select_result: function(frm, cdt, cdn) {\r\n        var row = locals[cdt][cdn]  // Retrieve the document row\r\n        console.log(row)\r\n        row.result_value = row.select_result;  // Set the result_value based on select_result\r\n   \r\n\t   frm.refresh_field(\"normal_test_items\") // Refresh the normal_test_result field\r\n    \r\n\r\n}\r\n\r\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "PACU  Discharge criteria Aldrete score",
  "enabled": 1,
  "modified": "2025-05-08 11:38:56.146673",
  "module": "HIS",
  "name": "PACU  Discharge",
  "script": "// frappe.ui.form.on('PACU  Discharge criteria Aldrete score', {\r\n//     before_save(frm) {\r\n//         let total_score = 0;\r\n\r\n//         const sumFields = (child_table, fields) => {\r\n//             (frm.doc[child_table] || []).forEach(row => {\r\n//                 fields.forEach(field => {\r\n//                     const raw = row[field];\r\n//                     if (raw !== null && raw !== undefined && raw !== '') {\r\n//                         const value = parseFloat(raw);\r\n//                         if (!isNaN(value)) {\r\n//                             total_score += value;\r\n//                         }\r\n//                     }\r\n//                 });\r\n//             });\r\n//         };\r\n\r\n//         const activityFields = [\r\n//             'able_to_move_voluntarily_or_on_command',\r\n//             'four_extremities',\r\n//             'two_extremities',\r\n//             'zero_extremities'\r\n//         ];\r\n\r\n//         const commonFields = [\r\n//             'able_to_move_voluntarily_or_on_command',\r\n//             'four_extremities',\r\n//             'two_extremities'\r\n//         ];\r\n\r\n//         // Update field names below based on your actual DocType fieldnames\r\n//         sumFields('activity_pacu', activityFields);\r\n//         sumFields('respiration_pacu', commonFields);\r\n//         sumFields('circulation_pacu', commonFields);\r\n//         sumFields('consciousness_pacu', commonFields);\r\n//         sumFields('o2_saturation_pacu', commonFields);\r\n\r\n//         // Safe assignment\r\n//         frm.doc.aldrete_score = total_score;\r\n//     }\r\n// });\r\n\r\n\r\n\r\nfrappe.ui.form.on('PACU  Discharge criteria Aldrete score', {\r\n    before_save(frm) {\r\n        let total_score = 0;\r\n\r\n        const sumFields = (child_table, fields) => {\r\n            (frm.doc[child_table] || []).forEach(row => {\r\n                fields.forEach(field => {\r\n                    const raw = row[field];\r\n                    if (raw !== null && raw !== undefined && raw !== '') {\r\n                        const value = parseFloat(raw);\r\n                        if (!isNaN(value)) {\r\n                            total_score += value;\r\n                        }\r\n                    }\r\n                });\r\n            });\r\n        };\r\n\r\n        const activityFields = [\r\n            'able_to_move_voluntarily_or_on_command',\r\n            'four_extremities',\r\n            'two_extremities',\r\n            'zero_extremities'\r\n        ];\r\n\r\n        const commonFields = [\r\n            'able_to_move_voluntarily_or_on_command',\r\n            'four_extremities',\r\n            'two_extremities'\r\n        ];\r\n\r\n        sumFields('activity_pacu', activityFields);\r\n        sumFields('respiration_pacu', commonFields);\r\n        sumFields('circulation_pacu', commonFields);\r\n        sumFields('consciousness_pacu', commonFields);\r\n        sumFields('o2_saturation_pacu', commonFields);\r\n\r\n        // Set aldrete_score\r\n        frm.doc.aldrete_score = total_score;\r\n\r\n        // Set patient_discharge_from_pacu based on score\r\n        if (total_score >= 9) {\r\n            frm.doc.patient_discharge_from_pacu = 'Yes';\r\n        } else if (total_score <= 8) {\r\n            frm.doc.patient_discharge_from_pacu = 'No';\r\n        } else {\r\n            // Optional: if score is 9, do nothing or set to a default\r\n            frm.doc.patient_discharge_from_pacu = ''; // Or keep existing\r\n        }\r\n    }\r\n});\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "BLOOD TRANSFUSION FORM",
  "enabled": 1,
  "modified": "2025-05-15 12:44:03.205779",
  "module": "HIS",
  "name": "Blood Product",
  "script": "// frappe.ui.form.on(\"BLOOD TRANSFUSION FORM\", {\r\n//     refresh(frm) {\r\n//         if (\r\n//             frm.is_new() && \r\n//             (!frm.doc.blood_product || frm.doc.blood_product.length === 0)\r\n//         ) {\r\n//             const predefined_blood_products = [\r\n//                 'Whole Blood', \r\n//                 'Erythrocyte Suspension', \r\n//                 'Fresh Frozen Plasma',\r\n//                 'Thrombocyte Suspension',\r\n//                 'Cryoprecipitate'\r\n//             ];\r\n\r\n//             // Loop through each predefined blood product and add them as rows\r\n//             predefined_blood_products.forEach(blood_product => {\r\n//                 let row = frm.add_child(\"blood_product\");\r\n//                 row.blood_product = blood_product;  // Populate 'blood_product' field with predefined value\r\n//             });\r\n\r\n//             // Refresh the blood product table to show the newly added rows\r\n//             frm.refresh_field(\"blood_product\");\r\n//         }\r\n        \r\n        \r\n        \r\n        \r\n//         // \r\n//         if (\r\n//             frm.is_new() && \r\n//             (!frm.doc.during_transfusion || frm.doc.during_transfusion.length === 0)\r\n//         ) {\r\n//             const predefined_during_transfusions = [\r\n//                 'Fever', \r\n//                 'Pulse', \r\n//                 'Respiration',\r\n//                 'Blood Pressure',\r\n//             ];\r\n\r\n//             // Loop through each predefined blood product and add them as rows\r\n//             predefined_during_transfusions.forEach(transfusion => {\r\n//                 let row = frm.add_child(\"during_transfusion\");\r\n//                 row.during_transfusion = transfusion;  // Populate 'blood_product' field with predefined value\r\n//             });\r\n\r\n//             // Refresh the blood product table to show the newly added rows\r\n//             frm.refresh_field(\"during_transfusion\");\r\n//         }\r\n//     },\r\n// });\r\n\r\n\r\n\r\n\r\nfrappe.ui.form.on(\"BLOOD TRANSFUSION FORM\", {\r\n    refresh(frm) {\r\n        // Always check for predefined blood products and add them if necessary\r\n        if (!frm.doc.blood_product || frm.doc.blood_product.length === 0) {\r\n            const predefined_blood_products = [\r\n                'Whole Blood', \r\n                'Erythrocyte Suspension', \r\n                'Fresh Frozen Plasma',\r\n                'Thrombocyte Suspension',\r\n                'Cryoprecipitate'\r\n            ];\r\n\r\n            // Loop through each predefined blood product and add them as rows\r\n            predefined_blood_products.forEach(blood_product => {\r\n                let row = frm.add_child(\"blood_product\");\r\n                row.blood_product = blood_product;  // Populate 'blood_product' field with predefined value\r\n            });\r\n\r\n            // Refresh the blood product table to show the newly added rows\r\n            frm.refresh_field(\"blood_product\");\r\n        }\r\n\r\n        // Always check for predefined during transfusion data and add them if necessary\r\n        if (!frm.doc.during_transfusion || frm.doc.during_transfusion.length === 0) {\r\n            const predefined_during_transfusions = [\r\n                'Fever', \r\n                'Pulse', \r\n                'Respiration',\r\n                'Blood Pressure',\r\n            ];\r\n\r\n            // Loop through each predefined during transfusion and add them as rows\r\n            predefined_during_transfusions.forEach(transfusion => {\r\n                let row = frm.add_child(\"during_transfusion\");\r\n                row.during_transfusion = transfusion;  // Populate 'during_transfusion' field with predefined value\r\n            });\r\n\r\n            // Refresh the during transfusion table to show the newly added rows\r\n            frm.refresh_field(\"during_transfusion\");\r\n        }\r\n        \r\n        // Always check for predefined during transfusion data and add them if necessary\r\n        if (!frm.doc.during_transfusion2 || frm.doc.during_transfusion2.length === 0) {\r\n            const predefined_during_transfusions = [\r\n                'Fever', \r\n                'Pulse', \r\n                'Respiration',\r\n                'Blood Pressure',\r\n            ];\r\n\r\n            // Loop through each predefined during transfusion and add them as rows\r\n            predefined_during_transfusions.forEach(transfusion => {\r\n                let row = frm.add_child(\"during_transfusion2\");\r\n                row.during_transfusion2 = transfusion;  // Populate 'during_transfusion' field with predefined value\r\n            });\r\n\r\n            // Refresh the during transfusion table to show the newly added rows\r\n            frm.refresh_field(\"during_transfusion2\");\r\n        }\r\n    },\r\n});\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Employee Receivable",
  "enabled": 0,
  "modified": "2025-08-06 15:53:10.733979",
  "module": "HIS",
  "name": "Employee Receivable",
  "script": "frappe.ui.form.on('Employee Receivable', {\n\trefresh(frm) {\n\t\t// your code here\n\t\t frm.set_query(\"account\", function() {\n         return {\n         \"filters\": {\n         \"account_type\": \"Payable\",\n        \n         }\n         };\n         });\n\t}\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Journal Entry",
  "enabled": 1,
  "modified": "2025-05-21 12:24:30.274667",
  "module": "HIS",
  "name": "Journal Entry",
  "script": "frappe.ui.form.on('Journal Entry', {\r\n    refresh(frm) {\r\n        // your code here\r\n    },\r\n\r\n    async before_save(frm) {\r\n        let promises = frm.doc.accounts.map(async (row) => {\r\n            if (row.party && row.party_type) {\r\n                let field_name = row.party_type.toLowerCase() + \"_name\";\r\n                try {\r\n                    const r = await frappe.db.get_value(row.party_type, row.party, field_name);\r\n                    if (r && r.message && r.message[field_name]) {\r\n                        row.party_name = r.message[field_name];\r\n                    }\r\n                } catch (e) {\r\n                    console.error(\"Error fetching party name for\", row.party, e);\r\n                }\r\n            }\r\n        });\r\n\r\n        await Promise.all(promises);\r\n        frm.refresh_fields(\"accounts\");\r\n    }\r\n});\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Salary Payments",
  "enabled": 0,
  "modified": "2025-08-06 15:53:10.670793",
  "module": "HIS",
  "name": "Salary Payments",
  "script": "frappe.ui.form.on('Salary Payments', {\n    before_save(frm) {\n        validate_missing_values(frm)\n        let total_amount = 0;\n        let total_payment = 0;\n\n        frm.doc.salary_payments_details.forEach(row => {\n            total_amount += flt(row.amount);\n            total_payment += flt(row.payment);\n        });\n\n        frm.set_value('total_amount', total_amount);\n        frm.set_value('total_payment', total_payment);\n\n        frm.refresh_field('total_amount');\n        frm.refresh_field('total_payment');\n    },\n    refresh(frm) {\n        // update_salary_details(frm)\n        \n        frm.set_query(\"account\", function() {\n            return {\n                filters: {\n                    account_type: [\"in\", [\"Bank\", \"Cash\"]]\n                }\n            };\n        });\n        \n        if (frm.is_new()){\n             update_salary_details(frm)\n        }\n        if (!frm.doc.from_date) {\n            let today = frappe.datetime.get_today();\n            let first_day = today.slice(0, 8) + \"01\";\n            frm.set_value(\"from_date\", first_day);\n        } \n    },\n\n    from_date: update_salary_details,\n    to_date: update_salary_details,\n    department: update_salary_details\n});\n\nfunction validate_missing_values(frm) {\n    \n    let total_amount = 0;\n    frm.doc.salary_payments_details.forEach(detailRow => {\n        // console.log(detailRow)\n        if (!detailRow.amount){\n        const filters = {\n            // start_date: frm.doc.from_date,\n            // end_date: frm.doc.to_date,\n            name: detailRow.salary_slip,\n            docstatus: 1,\n            employee: detailRow.employee\n        };\n\n        frappe.call({\n            method: \"frappe.client.get_list\",\n            args: {\n                doctype: \"Salary Slip\",\n                filters: filters,\n\n                fields: [\"net_pay\", \"paid_amount\", \"name\"],\n                page_length: 1000  // alternative to limit\n\n            },\n            callback: function (response) {\n           \n                if (response && response.message.length) {\n                    response.message.forEach(function (slip) {\n                        \n                        let unpaid = slip.net_pay - slip.paid_amount;\n                         unpaid = Number(unpaid.toFixed(2)); // \u2705 round it immediately\n                        \n                       \n                        if (unpaid !== 0) {\n                            // Update the matching child row\n                            const child = frm.doc.salary_payments_details.find(r => r.employee === detailRow.employee);\n                            if (child) {\n                                child.amount = unpaid;\n                                child.balance = Number((unpaid - (child.payment || 0)).toFixed(2));\n                                total_amount= total_amount + unpaid\n                            }\n                        }\n                    });\n                    frm.doc.total_amount = total_amount;\n                    frm.refresh_field(\"salary_payments_details\");\n                    frm.refresh_field(\"total_amount\");\n                }\n            }\n        \n        });\n    }\n    });\n}\n\nfunction update_salary_details(frm) {\n    if (frm.doc.from_date && frm.doc.to_date) {\n        const filters = {\n            start_date: frm.doc.from_date,\n            end_date: frm.doc.to_date,\n            docstatus: 1\n        };\n\n        if (frm.doc.department) {\n            filters.department = frm.doc.department;\n        }\n\n        frappe.call({\n            method: \"frappe.client.get_list\",\n            args: {\n                doctype: \"Salary Slip\",\n                filters: filters,\n                fields: [\"*\"],\n                limit_page_length: 1000 \n            },\n            callback: function (response) {\n                if (response.message) {\n                    frm.clear_table(\"salary_payments_details\");\n\n                    let total_amount = 0;\n                    let total_payment = 0;\n                    let payroll_entry='';\n\n                    response.message.forEach(function (row) {\n                        let unpaid = row.net_pay - row.paid_amount;\n                         unpaid = Number(unpaid.toFixed(2)); // \u2705 round it immediately\n                        console.log(row)\n                        if (unpaid !== 0) {\n                            let child = frm.add_child(\"salary_payments_details\");\n                            child.employee = row.employee;\n                            child.employee_name = row.employee_name;\n                            child.department = row.department;\n                            child.amount = unpaid;\n                            child.payment = unpaid;\n                            child.balance = 0;\n                            child.salary_slip = row.name;\n                            child.payroll_entry = row.payroll_entry;\n                            payroll_entry= row.payroll_entry;\n                            \n\n                            total_amount += unpaid;\n                            total_payment += unpaid;\n                        }\n                    });\n\n                    frm.doc.total_amount = total_amount;\n                    frm.doc.total_payment = total_payment;\n                    frm.doc.payroll_entry = payroll_entry;\n                    \n                    frm.refresh_field(\"salary_payments_details\");\n                    frm.refresh_field(\"total_amount\");\n                    frm.refresh_field(\"total_payment\");\n                    frm.refresh_field(\"payroll_entry\");\n                }\n            }\n        });\n    }\n}\n\nfrappe.ui.form.on('Salary Payments Details', {\n    payment(frm, cdt, cdn) {\n        let row = locals[cdt][cdn];\n        row.balance = row.amount - row.payment;\n\n        // Update totals when any payment changes\n        let total_amount = 0;\n        let total_payment = 0;\n\n        frm.doc.salary_payments_details.forEach(child => {\n            total_amount += child.amount || 0;\n            total_payment += child.payment || 0;\n        });\n\n        frm.doc.total_amount = total_amount;\n        frm.doc.total_payment = total_payment;\n\n        frm.refresh_field('salary_payments_details');\n        frm.refresh_field('total_amount');\n        frm.refresh_field('total_payment');\n    }\n})\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Invoice",
  "enabled": 1,
  "modified": "2025-06-21 11:47:12.711050",
  "module": "HIS",
  "name": "Is Reeturn Checkbox",
  "script": "frappe.ui.form.on('Sales Invoice', {\r\n    onload: function(frm) {\r\n        // Hide the field by default\r\n        frm.set_df_property('is_return', 'hidden', 1);\r\n\r\n        // Use client-side session roles\r\n        const user_roles = frappe.user_roles;\r\n\r\n        if (user_roles.includes(\"Pharmacy\")) {\r\n            // Show the field if user has Pharmacy role\r\n            frm.set_df_property('is_return', 'hidden', 0);\r\n        }\r\n    }\r\n});\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Partner",
  "enabled": 1,
  "modified": "2025-07-01 08:51:33.485576",
  "module": "HIS",
  "name": "Sales Partner Name",
  "script": "frappe.ui.form.on('Sales Partner', {\r\n    employee_ids: function(frm) {\r\n        if (frm.doc.employee_ids) {\r\n            frappe.db.get_value('Employee', frm.doc.employee_ids, 'employee_name')\r\n                .then(r => {\r\n                    if (r && r.message) {\r\n                        frm.set_value('partner_name', r.message.employee_name);\r\n                    }\r\n                });\r\n        }\r\n    }\r\n});\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Nurses Evaluation",
  "enabled": 1,
  "modified": "2025-07-28 11:33:25.859934",
  "module": "HIS",
  "name": "Nurses Evaluation",
  "script": "// 2 = Excellent\r\n// 1 = Good \r\n// 0 = Poor\r\n\r\n\r\n\r\nfrappe.ui.form.on('Nurses Evaluation', {\r\n    after_save(frm) {\r\n        const test_fields = \r\n        [\r\n        \"uses\", \"clearly_explains\", \"actively_explains\", \"shares_important\", \r\n        \"manages_own\", \"shows_empathy\", \"recognises\", \"greets\", \"responds\",\r\n        \"personalizes\", \"deescalates\", \"follows\", \"b_accepts_responsibility_for_actions_and_decisions\",\r\n        \"4_c\", \"4_d\", \"adjusts\", \"maintains\", \"identifies\", \"makes\", \"prioritizes\"\r\n        ];\r\n\r\n        const points_map = {\r\n            \"Excellent\": 2,\r\n            \"Good\": 1,\r\n            \"Poor\": 0\r\n        };\r\n\r\n        let total_score = 0;\r\n\r\n        test_fields.forEach(field => {\r\n            const value = frm.doc[field];\r\n            if (value) {\r\n                // Extract the rating keyword from value like \"Excellent\", \"Good\", etc.\r\n                const matched_rating = Object.keys(points_map).find(rating =>\r\n                    value.includes(rating)\r\n                );\r\n                if (matched_rating) {\r\n                    total_score += points_map[matched_rating];\r\n                }\r\n            }\r\n        });\r\n\r\n        // Save total to result field\r\n        frappe.call({\r\n            method: \"frappe.client.set_value\",\r\n            args: {\r\n                doctype: \"Nurses Evaluation\",\r\n                name: frm.doc.name,\r\n                fieldname: {\r\n                    result: total_score\r\n                }\r\n            },\r\n            callback: function() {\r\n                frm.reload_doc();\r\n            }\r\n        });\r\n    }\r\n});\r\n",
  "view": "Form"
 }
]