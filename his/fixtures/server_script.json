[
 {
  "allow_guest": 1,
  "api_method": "refer",
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "event_frequency": "All",
  "modified": "2025-04-07 09:54:43.574047",
  "module": "HIS",
  "name": "refer",
  "reference_doctype": null,
  "script": "# patient = \"PID-00001\"\npatient_name =  frappe.form_dict.patient\ndoctor = frappe.form_dict.doctor\ndate = frappe.utils.getdate()\n\n\nque_doc = frappe.new_doc(\"Que\")\nque_doc.patient = patient_name\nque_doc.practitioner = doctor\nque_doc.que_type = \"Refer\"\n# que_doc.que = \"Cash\"\n# que_doc.source =  \"Mobile App\"\nque_doc.cost_center = \"Main - HH\" \n# que_doc.insert()\nque_doc.insert(ignore_mandatory=True)\n\n# frappe.response['message'] = \"Booked Successfully.\"",
  "script_type": "API"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "event_frequency": "All",
  "modified": "2025-08-16 10:57:51.110613",
  "module": "HIS",
  "name": "Healthcare Practitioner Creation Prevent",
  "reference_doctype": "Healthcare Practitioner",
  "script": "if not (\r\n    frappe.utils.has_role(\"System Manager\", user=frappe.session.user) or \r\n    frappe.utils.has_role(\"Full Admin\", user=frappe.session.user)\r\n):\r\n    frappe.throw(\"You Are Not Allowed To Create Consultant\")\r\n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Cancel",
  "event_frequency": "All",
  "modified": "2025-03-03 09:50:51.561886",
  "module": "HIS",
  "name": "Cancel Sales Invoice Journal",
  "reference_doctype": "Sales Invoice",
  "script": "if frappe.db.get_value(\"Journal Entry\", {\"sales_invoice\": doc.name}, \"name\"):\n    stock_entry= frappe.get_doc(\"Journal Entry\",frappe.db.get_value(\"Journal Entry\", {\"sales_invoice\": doc.name}, \"name\"))\n    if stock_entry.docstatus==1:\n        stock_entry.cancel()\n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 1,
  "api_method": "make_appointment",
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "event_frequency": "All",
  "modified": "2025-04-07 09:54:43.550386",
  "module": "HIS",
  "name": "make_appointment",
  "reference_doctype": null,
  "script": "mobile = frappe.form_dict.get('mobile')\n\npatient = frappe.get_list(\"Patient\", filters={\"mobile\": mobile}, fields=[\"name\"])\nif not patient:\n    frappe.response['message'] = \"Patient was not registered. Register now\"\nelse:\n    # patient = \"PID-00001\"\n    patient_name = patient[0].get(\"name\")\n    doctor = frappe.form_dict.doctor\n    date = frappe.form_dict.date\n    \n    visit_charge = frappe.db.get_value(\"Healthcare Practitioner\" , doctor, 'op_consulting_charge')\n    que_doc = frappe.new_doc(\"Que\")\n    que_doc.patient = patient_name\n    que_doc.practitioner = doctor\n    que_doc.payable_amount = visit_charge\n    que_doc.mode_of_payment = \"Cash\"\n    que_doc.source =  \"Mobile App\"\n    que_doc.cost_center = \"Main - HH\" \n    # que_doc.insert()\n    que_doc.insert(ignore_mandatory=True)\n    \n    frappe.response['message'] = \"Booked Successfully.\"",
  "script_type": "API"
 },
 {
  "allow_guest": 1,
  "api_method": "get_doctors",
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "event_frequency": "All",
  "modified": "2025-04-07 09:54:43.562302",
  "module": "HIS",
  "name": "get_doctors",
  "reference_doctype": null,
  "script": "data = frappe.db.get_list(\"Healthcare Practitioner\", fields=['name', 'attach', 'op_consulting_charge', 'department', 'status'])\n\ndoctor_info = []\n\nfor d in data:\n    if d.status != 'Disabled': \n        doctor_info.append({\n            \"doctor_name\": d.name,  \n            \"languages\": \"English\", \n            \"experience\": \"30 years\", \n            \"location\": \"Mogadishu Somalia\",  \n            \"image\": d.attach or \"\",  \n            \"charge\": d.op_consulting_charge,\n            \"department\": d.department  \n        })\n\nfrappe.response['message'] = doctor_info",
  "script_type": "API"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Insert",
  "event_frequency": "All",
  "modified": "2025-03-04 14:01:33.713597",
  "module": "HIS",
  "name": "Emergency",
  "reference_doctype": "Que",
  "script": "if  doc.department==\"Accident And Emergency Care\":\n    frappe.get_doc({\n        \"doctype\": \"Emergency Triage\",\n        \"patient\": doc.patient,\n        \"practitioner\": doc.practitioner,\n        \"que\": doc.name,\n        \n    }).insert(ignore_permissions=1)\n    if frappe.db.exists(\"Que\" , doc.name):\n        old_que = frappe.get_doc(\"Que\" , doc.name)\n        old_que.status = \"Closed\" \n        # old_que.patient_encounter = doc.name\n        old_que.save(ignore_permissions=1)\n# if  doc.department==\"Dental\":\n#     frappe.get_doc({\n#         \"doctype\": \"Dental\",\n#         \"patient\": doc.patient,\n#         \"practitioner\": doc.practitioner,\n#         \"que\": doc.name,\n        \n#     }).insert()\n#     if frappe.db.exists(\"Que\" , doc.name):\n#         old_que = frappe.get_doc(\"Que\" , doc.name)\n#         old_que.status = \"Closed\" \n        # old_que.patient_encounter = doc.name\n        old_que.save()\n# if doc.refered_from:\n#     if doc.phone:\n#         frappe.call(\"frappe.core.doctype.sms_settings.sms_settings.send_sms\",  msg=\"Test Refered Hospital\",  receiver_list=[doc.phone])",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Submit",
  "event_frequency": "All",
  "modified": "2025-03-03 09:50:51.824474",
  "module": "HIS",
  "name": "create_or_boking",
  "reference_doctype": "Sales Invoice",
  "script": "for i in doc.items:\n    # frappe.msgprint(i.item_code)\n    if frappe.db.exists(\"Clinical Procedure Template\", i.item_code, cache=True):\n    \n        clinical = frappe.get_doc({\n            'doctype': 'OR BOOKING FORM',\n            'patient': doc.patient,\n            'patient_name': doc.patient_name,\n            'procedure': i.item_code,\n            'practitioner': doc.ref_practitioner,\n            \"sex\":i.sex,\n            \"weight\": i.weight,\n            \"diagnosis\": i.diagnosis,\n            \"procedure\": i.item_code,\n            \"surgeon\": i.surgeonh,\n            \"proposed_date_of_surgury\": i.proposed_date_of_surgury,\n            \"surgery_lenght_of_time\" : i.surgery_lenght_of_time,\n            \"company\" : doc.company,\n            # \"appointment_date\" : doc.posting_date\n        })\n        clinical.insert(ignore_permissions = True)",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 1,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Insert",
  "event_frequency": "All",
  "modified": "2025-03-03 09:50:51.575182",
  "module": "HIS",
  "name": "create_pro",
  "reference_doctype": "Vital Signs",
  "script": "clinical = frappe.get_doc({\n      \n      \"doctype\" : \"Sales Order\",\n      \"patient\" : doc.patient,\n      \"customer\" : frappe.db.get_value(\"Patient\" , doc.patient , \"customer\"),\n      \"source_order\" : \"OPD\",\n      \"items\": [{\n          \"item_code\" : \"OPD Consultation\",\n          \"qty\" : 1,\n          \n          \n      },\n      {\n          \"item_code\" : \"Registration Fee\",\n          \"qty\" : 1,\n          \n          \n      }\n      ]\n      \n      \n  })\nclinical.insert(ignore_permissions = 1)\nclinical.submit()\n\n\nque = frappe.get_doc({\n      \n      \"doctype\" : \"Que\",\n      \"patient\" : doc.patient,\n      \"practitioner\" : doc.doctor,\n    #   \"customer\" : frappe.db.get_value(\"Patient\" , doc.patient , \"customer\"),\n      \"is_free\" : 1\n          \n     \n      \n      \n  })\nque.insert(ignore_permissions = 1)\n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 1,
  "api_method": "get_departments",
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "event_frequency": "All",
  "modified": "2025-04-07 09:54:43.536579",
  "module": "HIS",
  "name": "get_departments",
  "reference_doctype": null,
  "script": "data = frappe.db.get_list(\"Medical Department\" , fields = ['name'] , filters = {\"show_in_mobile\" : 1})\n\nfrappe.response['message'] = data",
  "script_type": "API"
 },
 {
  "allow_guest": 1,
  "api_method": "get_patients",
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "event_frequency": "All",
  "modified": "2025-04-07 09:54:43.480476",
  "module": "HIS",
  "name": "get_patients",
  "reference_doctype": null,
  "script": "number = frappe.form_dict.mobile_no\n# frappe.errprint(number)\npatiens = frappe.db.get_list(\"Patient\" , filters = {\"mobile_no\" : number} , fields = ['name' , 'patient_name', 'sex' , 'mobile_no' , 'p_age'])\nfrappe.response['message'] = patiens",
  "script_type": "API"
 },
 {
  "allow_guest": 1,
  "api_method": "p_login",
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "event_frequency": "All",
  "modified": "2025-04-07 09:54:43.522326",
  "module": "HIS",
  "name": "p_login",
  "reference_doctype": null,
  "script": "number = frappe.form_dict.mobile_no\n# frappe.errprint(number)\npatien_exists = frappe.db.exists(\"Patient\" ,{\"mobile_no\" : number} )\nif patien_exists:\n    \n    frappe.response['message'] = {\"number\":number , \"status\" : 200}\nelse:\n    # frappe.errprint(frappe.response)\n    \n    frappe.response['http_status_code'] = 401\n    frappe.response['message'] = {\"msg\":\"Mobile Number Not Found\"} \n    ",
  "script_type": "API"
 },
 {
  "allow_guest": 1,
  "api_method": "registeration",
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "event_frequency": "All",
  "modified": "2025-04-07 09:54:43.510827",
  "module": "HIS",
  "name": "registeration",
  "reference_doctype": null,
  "script": "number = frappe.form_dict.mobile_no\nfull_name =  frappe.form_dict.full_name\nsex = frappe.form_dict.sex\ndistric = frappe.form_dict.district\nage = frappe.form_dict.age\n# frappe.errprint(number)\n\n\np_doc = frappe.new_doc(\"Patient\")\np_doc.first_name = full_name\np_doc.mobile_no = number\np_doc.p_age = age\np_doc.sex = sex\np_doc.territory  = distric\np_doc.insert()\n    ",
  "script_type": "API"
 },
 {
  "allow_guest": 1,
  "api_method": "get_districts",
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "event_frequency": "All",
  "modified": "2025-04-07 09:54:43.498913",
  "module": "HIS",
  "name": "districts",
  "reference_doctype": null,
  "script": "\n# frappe.errprint(number)\ndistricts = frappe.db.get_list(\"Territory\" , filters = {\"is_group\" : 0} , fields = ['name'])\nfrappe.response['message'] = districts",
  "script_type": "API"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Cancel",
  "event_frequency": "All",
  "modified": "2025-03-03 09:50:51.794756",
  "module": "HIS",
  "name": "Cancel bill to Employee",
  "reference_doctype": "Sales Invoice",
  "script": "if frappe.db.get_value(\"Journal Entry\", {\"sales_invoice\": doc.name}, \"name\"):\n    stock_entry= frappe.get_doc(\"Journal Entry\",frappe.db.get_value(\"Journal Entry\", {\"sales_invoice\": doc.name}, \"name\"))\n    if stock_entry.docstatus==1:\n        stock_entry.cancel()\n\n\n# if frappe.db.get_value(\"Additional Salary\", {\"sales_invoice\": doc.name}, \"name\"):\n#     deduction= frappe.get_doc(\"Additional Salary\",frappe.db.get_value(\"Additional Salary\", {\"sales_invoice\": doc.name}, \"name\"))\n#     if deduction.docstatus==1:\n#         deduction.cancel()\n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 1,
  "api_method": "get_appoint",
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "event_frequency": "All",
  "modified": "2025-04-07 09:54:43.465845",
  "module": "HIS",
  "name": "get_que",
  "reference_doctype": "Que",
  "script": "number = frappe.form_dict.mobile_no\n# frappe.errprint(number)\npatiens = frappe.db.get_list(\"Que\" , filters = {\"mobile\" : number} , fields = ['patient_name' , 'practitioner'  ,'date' , 'status'])\nfrappe.response['message'] = patiens",
  "script_type": "API"
 },
 {
  "allow_guest": 1,
  "api_method": "get_banners",
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "event_frequency": "All",
  "modified": "2025-04-07 09:54:43.448653",
  "module": "HIS",
  "name": "get_banners",
  "reference_doctype": null,
  "script": "banners = frappe.get_list(\"Banners\" , fields = ['image'])\nfrappe.response['message']  = banners",
  "script_type": "API"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Submit",
  "event_frequency": "All",
  "modified": "2025-03-03 09:50:51.690390",
  "module": "HIS",
  "name": "Radiology Status Update",
  "reference_doctype": "Radiology",
  "script": "doc.status= \"Completed\"",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Submit",
  "event_frequency": "All",
  "modified": "2025-03-03 09:50:51.705351",
  "module": "HIS",
  "name": "Lab Result Update",
  "reference_doctype": "Lab Result",
  "script": "doc.status= \"Submit\"",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 1,
  "api_method": "check_patient",
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "event_frequency": "All",
  "modified": "2025-04-07 09:54:43.439717",
  "module": "HIS",
  "name": "check_patient",
  "reference_doctype": null,
  "script": "mobile = frappe.form_dict.get('mobile')\n\npatient = frappe.get_list(\"Patient\", filters={\"mobile\": mobile}, fields=[\"name\"])\nif not patient:\n    frappe.response['message'] = \"Patient was not registered. Register now\"\nelse:\n    # frappe.response['message'] = \"Patient is already registered.\"\n    frappe.response['message'] = patient",
  "script_type": "API"
 },
 {
  "allow_guest": 1,
  "api_method": "register_patient",
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "event_frequency": "All",
  "modified": "2025-04-07 09:54:43.428568",
  "module": "HIS",
  "name": "register_patient",
  "reference_doctype": null,
  "script": "patient_name = frappe.form_dict.get('patient_name')\npatient_mobile = frappe.form_dict.get('patient_mobile')\npatient_age = frappe.form_dict.get('patient_age')\npatient_district = frappe.form_dict.get('patient_district')\npatient_sex = frappe.form_dict.get('patient_sex')\n\nname_parts = patient_name.split(\" \", 1)\nfirst_name = name_parts[0]\nlast_name = name_parts[1] if len(name_parts) > 1 else \"\"\n\npatient_doc = frappe.new_doc(\"Patient\")\npatient_doc.first_name = first_name\npatient_doc.last_name = last_name\npatient_doc.mobile_no = patient_mobile\npatient_doc.p_age = int(patient_age)\npatient_doc.territory = patient_district\npatient_doc.sex = patient_sex\n\npatient_doc.insert()\nfrappe.db.commit()\n\nfrappe.response['message'] = \"Registered Successfully.\"\n",
  "script_type": "API"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Submit",
  "event_frequency": "All",
  "modified": "2025-03-03 09:50:51.747493",
  "module": "HIS",
  "name": "Clincal Procedure",
  "reference_doctype": "Clinical Procedure",
  "script": "if doc.consumable_items:\n\titems = []\n\tfor item in doc.consumable_items:\n\t\t\titems.append({\n\t\t\t\t\"item_code\" : item.item_code,\n\t\t\t\t\"qty\" : item.qty,\n\t\t\t\t\n\t\t\t})\n\tfrappe.errprint(items)\n\tstock_ent = frappe.get_doc({\n\t\t\"doctype\" : \"Stock Entry\",\n\t\t\"posting_date\" : frappe.utils.nowdate(),\n\t\t\"stock_entry_type\": \"Material Issue\",\n\t\t\"company\" : doc.company,\n\t\t\"from_warehouse\": doc.source_warehouse,\n\t\t\"items\" : items,\n\t\t})\n\tstock_ent.insert(ignore_permissions = True)\n\tstock_ent.submit()\n\t# doc.db_set(\"status\", \"Completed\")\n\t# return stock_ent\n\nif doc.procedure_items:\n\tpro_items = []\n\tfor item in doc.procedure_items:\n\t\t\tpro_items.append({\n\t\t\t\t\"item_code\" : item.item_code,\n\t\t\t\t\"qty\" : item.qty\n\t\t\t})\n\tcustomer_to = frappe.db.get_value(\"Patient\", doc.patient, \"customer\")\n\tsales_doc = frappe.get_doc({\n\t\t\"doctype\" : \"Sales Invoice\",\n\t\t\"posting_date\" : frappe.utils.nowdate(),\n\t\t\"customer\": customer_to,\n\t\t\"patient\" : doc.patient,\n\t\t\"is_pos\" : 0,\n\t\t\"items\" : pro_items,\n\t\t})\n\tsales_doc.insert(ignore_permissions = True)\n\tsales_doc.submit()\n# \tdoc.db_set(\"status\", \"Completed\")\n\t# return sales_doc",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Submit",
  "event_frequency": "All",
  "modified": "2025-03-03 09:50:51.764164",
  "module": "HIS",
  "name": "Create Dental Result",
  "reference_doctype": "Sales Invoice",
  "script": "for i in doc.items:\n    if i.item_group == \"Dental\":\n        obs = frappe.get_doc({\n            'doctype': 'Dental Result',\n            'patient': doc.patient,\n            'practitioner': doc.ref_practitioner,\n\t\t    \"examination\":   i.item_code\n        })\n        obs.insert(ignore_permissions = True)",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "event_frequency": "All",
  "modified": "2025-03-03 09:50:51.810317",
  "module": "HIS",
  "name": "Que",
  "reference_doctype": "Que",
  "script": "quedoc = frappe.db.get_list('Que', \n    filters={\n        'date': doc.date, \n        'patient': doc.patient, \n        'practitioner': doc.practitioner,\n        'name': ['!=', doc.name] , \n        'status': 'open' # This line filters out the current document by its name\n    }, \n    fields=['name']\n)\n\nif quedoc:\n    frappe.throw(f\"This Patient {doc.patient_name} has an appointment with doctor {doc.practitioner}  on Today\")\n\n# if doc.gender == \"Male\" and doc.department==\"OBS AND GYNO\":\n#     frappe.throw(\"The Patient is Male and the doctor department is OBS AND GYNO, So Please Change The Male to make this Appointment!!\")",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Submit",
  "event_frequency": "All",
  "modified": "2025-03-03 09:50:51.777775",
  "module": "HIS",
  "name": "Create",
  "reference_doctype": "Sales Invoice",
  "script": "for i in doc.items:\n    # frappe.msgprint(i.item_code)\n    if frappe.db.exists(\"Clinical Procedure Template\", i.item_code, cache=True):\n    \n        clinical = frappe.get_doc({\n            'doctype': 'Pre Anesthesia Evaluation and Re Evaluation Form',\n            'pid': doc.patient,\n            # 'patient_name': doc.patient_name,\n            'surgical_procedure': i.item_code,\n            # 'practitioner': doc.ref_practitioner,\n            # \"company\" : doc.company,\n            # \"appointment_date\" : doc.posting_date\n        })\n        clinical.insert(ignore_permissions = True)",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Submit",
  "event_frequency": "All",
  "modified": "2025-07-25 20:51:39.328413",
  "module": "HIS",
  "name": "Bill To",
  "reference_doctype": "Sales Invoice",
  "script": "his_settings = frappe.get_doc(\"HIS Settings\", \"HIS Settings\")\ndebtor_account = \"\"\nemployee_receivable= \"\"\nif his_settings.debtors_account:\n   debtor_account = his_settings.debtors_account\nif his_settings.employee_receivable:\n   employee_receivable = his_settings.employee_receivable\n\nif doc.is_inpatient and doc.outstanding_amount>0 and not doc.is_return:\n    abbr= frappe.db.get_value(\"Company\", doc.company, \"abbr\")\n    From_patient=frappe.db.get_value('Patient', doc.patient, 'customer' )\n    From_patient_name=frappe.db.get_value('Patient', doc.patient, 'patient_name' )\n    To_patient_name=frappe.db.get_value('Patient', doc.bill_to_patient, 'patient_name' )\n    To_patient=frappe.db.get_value('Patient', doc.bill_to_patient, 'customer' )\n    account = [\n\t\t\t\n\t\t{\n\t\t\t\"account\":frappe.db.get_value(\"Party Account\", {\"parent\": To_patient}, \"account\") or debtor_account,\n\t\t\t\"party_type\": \"Customer\",\n\t\t\t\"party\" : To_patient,\n\t\t\t\"debit_in_account_currency\": doc.outstanding_amount,\n\t\t    \"cost_center\": doc.cost_center\n\t\t},\n\t\t{\n\t\t\t\"account\": frappe.db.get_value(\"Party Account\", {\"parent\": From_patient}, \"account\") or debtor_account,\n\t\t\t'party_type': \"Customer\",\n\t\t\t\"party\" : From_patient,\n\t\t\t\"credit_in_account_currency\": doc.outstanding_amount,\n\t\t\t\"cost_center\": doc.cost_center\n\t\t},\n    ]\n    jou = frappe.get_doc({\n    \t\t'doctype': 'Journal Entry',\n    \t\t'voucher_type': 'Journal Entry',\n    \t\t\"posting_date\" : frappe.utils.getdate(),\n    \t\t\"user_remark\": f\"Transfered from Patient {From_patient_name} to Patient {To_patient_name}\",\n    \t\t\"accounts\": account,\n    \t\t\"patient_name\" : From_patient_name,\n    \t\t\"patient\": doc.patient,\n    \t\t\"sales_invoice\" : doc.name\n    \t\t\n    \t})\n    jou.insert(ignore_permissions = True)\n    jou.submit()\n\n\nif doc.bill_to_employee and doc.outstanding_amount>0:\n    abbr= frappe.db.get_value(\"Company\", doc.company, \"abbr\")\n    From_patient=frappe.db.get_value('Patient', doc.patient, 'customer')\n    From_patient_name=frappe.db.get_value('Patient', doc.patient, 'patient_name')\n    To_empl=frappe.db.get_value('Employee', doc.employee, 'employee_name' )\n    To_patient=doc.employee\n    account = [\n\t\t\t\n\t\t{\n\t\t    \n\t\t    \"account\": employee_receivable,\n# \t\t\t\"account\":\"2110 - Creditors - \"+abbr,\n\t\t\t\"party_type\": \"Employee\",\n\t\t\t\"party\" : doc.employee,\n\t\t\t\"debit_in_account_currency\": doc.outstanding_amount,\n\t\t\t\"cost_center\": doc.cost_center\n\t\t\n\t\t},\n\t\t{\n\t\t\t\"account\": frappe.db.get_value(\"Party Account\", {\"parent\": From_patient}, \"account\") or debtor_account,\n\t\t\t'party_type': \"Customer\",\n\t\t\t\"party\" : From_patient,\n\t\t\t\"credit_in_account_currency\": doc.outstanding_amount,\n\t\t\t\"cost_center\": doc.cost_center\n\t\t},\n    ]\n    # frappe.errprint(account)\n    Journal = frappe.get_doc({\n    \t\t'doctype': 'Journal Entry',\n    \t\t'voucher_type': 'Journal Entry',\n    \t\t\"posting_date\" : frappe.utils.getdate(),\n    \t\t\"user_remark\": f\"Transfered from Patient  {From_patient_name} to Employee {To_empl} Invoice Number {doc.name}\",\n    \t\t\"accounts\": account,\n    \t\t\"patient\": doc.patient,\n    \t\t\"patient_name\": doc.patient_name,\n    \t\t\"sales_invoice\" : doc.name\n    \t\t\n    \t})\n    Journal.insert(ignore_permissions = True)\n    Journal.submit()\n\n#Refurn Reverse bill to ...\ndifference = max(0, doc.paid_amount - doc.grand_total)\n\nif doc.bill_to_employee and doc.is_return and difference>0:\n    abbr= frappe.db.get_value(\"Company\", doc.company, \"abbr\")\n    From_patient=frappe.db.get_value('Patient', doc.patient, 'customer')\n    From_patient_name=frappe.db.get_value('Patient', doc.patient, 'patient_name')\n    To_empl=frappe.db.get_value('Employee', doc.employee, 'employee_name' )\n    To_patient=doc.employee\n    account = [\n\t\t\t\n\t\t{\n\t\t    \"account\": employee_receivable,\n# \t\t\t\"account\":\"2110 - Creditors - \"+abbr,\n\t\t\t\"party_type\": \"Employee\",\n\t\t\t\"party\" : doc.employee,\n\t\t\t\"credit_in_account_currency\": difference,\n\t\t\t\"cost_center\": doc.cost_center\n\t\t\n\t\t},\n\t\t{\n\t\t\t\"account\": frappe.db.get_value(\"Party Account\", {\"parent\": From_patient}, \"account\") or debtor_account,\n\t\t\t'party_type': \"Customer\",\n\t\t\t\"party\" : From_patient,\n\t\t\t\"debit_in_account_currency\": difference,\n\t\t\t\"cost_center\": doc.cost_center\n\t\t},\n    ]\n    # frappe.errprint(account)\n    Journal = frappe.get_doc({\n    \t\t'doctype': 'Journal Entry',\n    \t\t'voucher_type': 'Journal Entry',\n    \t\t\"posting_date\" : frappe.utils.getdate(),\n    \t\t\"user_remark\": f\"Refund from Patient  {From_patient_name} to Employee {To_empl} Invoice Number {doc.name}\",\n    \t\t\"accounts\": account,\n    \t\t\"patient\": doc.patient,\n    \t\t\"patient_name\": doc.patient_name,\n    \t\t\"sales_invoice\" : doc.name\n    \t\t\n    \t})\n    Journal.insert(ignore_permissions = True)\n    Journal.submit()\n\nif doc.is_inpatient and  doc.is_return and difference>0:\n    abbr= frappe.db.get_value(\"Company\", doc.company, \"abbr\")\n    From_patient=frappe.db.get_value('Patient', doc.patient, 'customer' )\n    From_patient_name=frappe.db.get_value('Patient', doc.patient, 'patient_name' )\n    To_patient_name=frappe.db.get_value('Patient', doc.bill_to_patient, 'patient_name' )\n    To_patient=frappe.db.get_value('Patient', doc.bill_to_patient, 'customer' )\n    account = [\n\t\t\t\n\t\t{\n\t\t\t\"account\":frappe.db.get_value(\"Party Account\", {\"parent\": To_patient}, \"account\") or debtor_account,\n\t\t\t\"party_type\": \"Customer\",\n\t\t\t\"party\" : To_patient,\n            \"credit_in_account_currency\": difference,\n\t\t    \"cost_center\": doc.cost_center\n\t\t},\n\t\t{\n\t\t\t\"account\": frappe.db.get_value(\"Party Account\", {\"parent\": From_patient}, \"account\") or debtor_account,\n\t\t\t'party_type': \"Customer\",\n\t\t\t\"party\" : From_patient,\n\t\t\t\"debit_in_account_currency\": difference,\n\t\t\t\"cost_center\": doc.cost_center\n\t\t},\n    ]\n    jou = frappe.get_doc({\n    \t\t'doctype': 'Journal Entry',\n    \t\t'voucher_type': 'Journal Entry',\n    \t\t\"posting_date\" : frappe.utils.getdate(),\n    \t\t\"user_remark\": f\"Refunded from Patient {From_patient_name} to Patient {To_patient_name}\",\n    \t\t\"accounts\": account,\n    \t\t\"patient_name\" : From_patient_name,\n    \t\t\"patient\": doc.patient,\n    \t\t\"sales_invoice\" : doc.name\n    \t\t\n    \t})\n    jou.insert(ignore_permissions = True)\n    jou.submit()\n   ",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Insert",
  "event_frequency": "All",
  "modified": "2025-03-03 09:50:51.856284",
  "module": "HIS",
  "name": "Customer",
  "reference_doctype": "Patient",
  "script": "doc.save()  # Ensure the document is saved\n# frappe.db.commit()  # Commit if needed (only in a non-queued job)\ncust = frappe.get_doc(\"Customer\", doc.customer)\ncust.patient= doc.name\ncust.mobile=doc.mobile_no\ncust.save()",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Submit",
  "event_frequency": "All",
  "modified": "2025-07-08 11:36:36.580564",
  "module": "HIS",
  "name": "Paid Amount",
  "reference_doctype": "Sales Invoice",
  "script": "# if doc.paid_amount > doc.grand_total and not doc.is_return:\r\n#     if doc.payments:\r\n#         doc.payments[0].amount= doc.grand_total\r\n\r\n# if doc.is_pos and not doc.is_return:    \r\n#     if doc.insurance_policy and doc.payable_amount != 0 and doc.grand_total == doc.payments[0].amount:\r\n#         doc.payments[0].amount= doc.payable_amount\r\n#         doc.paid_amount = doc.payable_amount\r\n#     if doc.insurance_policy:\r\n#         doc.payments[0].amount= doc.payable_amount\r\n#         doc.paid_amount = doc.payable_amount\r\n\r\n\r\n\r\n# # Ensure payment doesn't exceed grand total unless it's a return\r\n# if doc.paid_amount > doc.grand_total and not doc.is_return:\r\n#     if doc.payments:\r\n#         doc.payments[0].amount = doc.grand_total\r\n\r\n# # Insurance-specific handling for POS and non-return cases\r\n# if doc.is_pos and not doc.is_return:\r\n#     if doc.insurance_policy:\r\n#         # Ensure patient pays only their portion\r\n#         doc.payments[0].amount = doc.payable_amount or 0.0\r\n#         doc.paid_amount = doc.payable_amount or 0.0\r\n\r\n\r\n\r\n\r\n# Ensure payment doesn't exceed grand total unless it's a return\r\nif doc.paid_amount > doc.grand_total and not doc.is_return:\r\n    if doc.payments:\r\n        doc.payments[0].amount = doc.grand_total\r\n\r\n# Handle insurance logic\r\nif doc.is_pos and not doc.is_return:\r\n    if doc.insurance_policy:\r\n        # Only override if values are inconsistent\r\n        expected_amount = doc.payable_amount or 0.0\r\n        if doc.payments and doc.payments[0].amount != expected_amount:\r\n            doc.payments[0].amount = expected_amount\r\n        if doc.paid_amount != expected_amount:\r\n            doc.paid_amount = expected_amount\r\n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "event_frequency": "Daily",
  "modified": "2025-03-03 09:50:51.869261",
  "module": "HIS",
  "name": "Auto Submit Encounter",
  "reference_doctype": "Patient Encounter",
  "script": "pass\n# def submit_draft_encounters():\n#     draft_encounters = frappe.get_all('Patient Encounter', filters={'docstatus': 'Draft'})\n#     # draft_encounters = frappe.get_doc(\"Patient Encounter\", \"HLC-ENC-2025-00138\")\n    \n#     # # Convert the list of draft encounters to a JSON string using frappe.utils\n#     # draft_encounters_str = frappe.utils.cstr(draft_encounters)\n    \n#     # # Use frappe.throw to output the draft encounters\n#     # frappe.throw(f\"Draft Encounters: {draft_encounters_str}\")\n\n\n    \n#     for encounter in draft_encounters:\n#         encounter_doc = frappe.get_doc('Patient Encounter', encounter.name)\n        \n#         if contains_relevant_info(encounter_doc):\n#             encounter_doc.submit()\n\n# def contains_relevant_info(encounter_doc):\n#     # Check if any relevant fields like medications, investigations, or procedures are filled\n#     return bool(encounter_doc.get('drug_prescription') or\n#                 encounter_doc.get('lab_test_prescription') or\n#                 encounter_doc.get('radaiology_prescription') or\n#                 encounter_doc.get('procedure_prescription'))\n\n# submit_draft_encounters()",
  "script_type": "Scheduler Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "event_frequency": "Daily",
  "modified": "2025-08-17 11:16:36.319673",
  "module": "HIS",
  "name": "Auto Bill Beds",
  "reference_doctype": null,
  "script": "ip_occupancy = frappe.db.sql(\"\"\"select * from `tabInpatient Occupancy` where `left` = 0;\"\"\", as_dict=True)\nif ip_occupancy:\n    \n    for ipo in ip_occupancy:\n        ip = frappe.get_doc(\"Inpatient Record\", ipo.parent)\n        if ip.status == \"Admitted\":\n            patientinfo = frappe.get_doc(\"Patient\", ip.patient)\n            service_unit_type = frappe.get_doc(\"Healthcare Service Unit Type\", frappe.db.get_value(\"Healthcare Service Unit\", ipo.service_unit, \"service_unit_type\"))\n            patient = ip.patient\n            patient_name = ip.patient_name\n            customer = patientinfo.customer\n            item_code = service_unit_type.item\n            rate = service_unit_type.rate\n            desc = service_unit_type.item\n            if service_unit_type.description:\n                desc = service_unit_type.description\n            remark = ipo.service_unit\n            practitioner = ip.primary_practitioner\n            medical_department = ip.medical_department\n            patient_doc = frappe.get_doc(\"Patient\", patient)\n            additional_discount_percentage= 0\n            customer_group = frappe.db.get_value(\"Customer\", customer, \"customer_group\")\n            if customer_group == \"Membership\":\n                additional_discount_percentage = 30\n\n            # Initialize items for the sales invoice\n            invoice_items = [{\n                \"item_code\": item_code,\n                \"item_name\": item_code,\n                \"description\": desc,\n                \"qty\": 1,\n                \"rate\": rate,\n                \"amount\": 1 * rate,\n                \"doctype\": \"Sales Invoice Item\",\n            }]\n\n            # Add room services items and calculate total rate including them\n            total_rate = rate  # start with base service unit rate\n            \n            if service_unit_type.room_services:\n                for room_service in service_unit_type.room_services:\n                    room_service_item = room_service.item\n                    room_service_rate = float(room_service.rate)\n                    room_service_qty = float(room_service.qty)\n            \n                    # Add to invoice items\n                    # invoice_items.append({\n                    #     \"item_code\": room_service_item,\n                    #     \"item_name\": room_service_item,\n                    #     \"qty\": room_service_qty,\n                    #     \"rate\": room_service_rate,\n                    #     \"amount\": room_service_qty * room_service_rate,\n                    #     \"doctype\": \"Sales Invoice Item\",\n                    # })\n                    \n                    invoice_items.append({\n                        \"item_code\": room_service_item,\n                        \"item_name\": room_service_item,\n                        \"qty\": room_service_qty,\n                        \"price_list_rate\": room_service_rate,  # e.g., 40\n                        \"rate\": room_service_rate,                          # Let Frappe compute with pricing rule\n                        \"amount\": room_service_qty * room_service_rate,                           # Frappe will recalculate\n                        \"doctype\": \"Sales Invoice Item\",\n                    })\n            \n                    total_rate = total_rate + room_service_rate * room_service_qty\n\n            # Check if the patient has an insurance policy\n            if patient_doc.insurance_policy:\n                policy = frappe.get_doc(\"Insurance Policy\", patient_doc.insurance_policy)\n                insurance_coverage_amount = (total_rate * policy.coverage_limits) / 100\n                payable_amount = total_rate - insurance_coverage_amount\n\n                salesdoc = frappe.get_doc({\n                    \"patient\": patient,\n                    \"patient_name\": patient_name,\n                    \"customer\": customer,\n                    \"is_pos\": 0,\n                    \"so_type\": \"Cashiers\",\n                    \"source_order\": \"IPD\",\n                    \"posting_date\": frappe.utils.getdate(),\n                    \"due_date\": frappe.utils.getdate(),\n                    \"remarks\": remark,\n                    \"insurance_coverage_amount\": insurance_coverage_amount,\n                    \"payable_amount\": payable_amount,\n                    \"doctype\": \"Sales Invoice\",\n                    \"cost_center\": \"Main - HH\",\n                    \"ref_practitioner\": practitioner,\n                    \"items\": invoice_items,\n                })\n            else:\n                salesdoc = frappe.get_doc({\n                    \"patient\": patient,\n                    \"patient_name\": patient_name,\n                    \"customer\": customer,\n                    \"is_pos\": 0,\n                    \"so_type\": \"Cashiers\",\n                    \"source_order\": \"IPD\",\n                    \"posting_date\": frappe.utils.getdate(),\n                    \"due_date\": frappe.utils.getdate(),\n                    \"remarks\": remark,\n                    \"doctype\": \"Sales Invoice\",\n                    \"cost_center\": \"Main - HH\",\n                    \"ref_practitioner\": practitioner,\n                    \"items\": invoice_items,\n                    \"additional_discount_percentage\": additional_discount_percentage\n                })\n\n            # Insert and submit the sales invoice\n            # try:\n            #     salesdoc.insert()\n            #     salesdoc.submit()\n            # except Exception as e:\n            #     frappe.log_error(f\"Error while creating sales invoice: {str(e)}\", \"Sales Invoice Creation Error\")\n                \n            try:\n                salesdoc.insert()\n                # salesdoc.save()\n                salesdoc.submit()\n            except Exception as e:\n                error_title = f\"Invoice Error: Patient {patient_name} with {patient} and Customer ID ({customer})\"\n                if len(error_title) > 140:\n                    error_title = error_title[:137] + \"...\"\n                \n                frappe.log_error(f\"Error while creating sales invoice for patient {patient} {patient_name} ({customer}):\\n{str(e)}\", error_title)\n\n\n# ip_occupancy = frappe.db.sql(\"\"\"select * from `tabInpatient Occupancy` where `left` = 0;\"\"\", as_dict=True)\n# if ip_occupancy:\n    \n#     for ipo in ip_occupancy:\n#         ip = frappe.get_doc(\"Inpatient Record\", ipo.parent)\n#         if ip.status == \"Admitted\":\n#             patientinfo = frappe.get_doc(\"Patient\", ip.patient)\n#             service_unit_type = frappe.get_doc(\"Healthcare Service Unit Type\", frappe.db.get_value(\"Healthcare Service Unit\", ipo.service_unit, \"service_unit_type\"))\n#             patient = ip.patient\n#             patient_name = ip.patient_name\n#             customer = patientinfo.customer\n#             item_code = service_unit_type.item\n#             rate = service_unit_type.rate\n#             desc = service_unit_type.description\n#             remark = ipo.service_unit\n#             practitioner = ip.primary_practitioner\n#             medical_department = ip.medical_department\n#             patient_doc = frappe.get_doc(\"Patient\", patient)\n\n#             # Initialize items for the sales invoice\n#             invoice_items = [{\n#                 \"item_code\": item_code,\n#                 \"item_name\": item_code,\n#                 \"description\": desc,\n#                 \"qty\": 1,\n#                 \"rate\": rate,\n#                 \"amount\": 1 * rate,\n#                 \"doctype\": \"Sales Invoice Item\",\n#             }]\n            \n#             # If room services exist, add them to the invoice items\n#             if service_unit_type.room_services:\n#                 for room_service in service_unit_type.room_services:\n#                     room_service_item = room_service.item  # Assuming you have an item field in the child table\n#                     room_service_rate = room_service.rate  # Assuming you have a rate field in the child table\n#                     room_service_qty = room_service.qty  # Assuming you have a description field in the child table\n\n#                     invoice_items.append({\n#                         \"item_code\": room_service_item,\n#                         \"item_name\": room_service_item,\n#                         \"qty\": room_service_qty,\n#                         \"rate\": room_service_rate,\n#                         \"amount\": 1 * room_service_rate,\n#                         \"doctype\": \"Sales Invoice Item\",\n#                     })\n            \n#             # Check if the patient has an insurance policy\n#             if patient_doc.insurance_policy:\n#                 policy = frappe.get_doc(\"Insurance Policy\", patient_doc.insurance_policy)\n#                 insurance_coverage_amount = (rate * policy.coverage_limits) / 100\n#                 payable_amount = rate - insurance_coverage_amount\n\n#                 salesdoc = frappe.get_doc({\n#                     \"patient\": patient,\n#                     \"patient_name\": patient_name,\n#                     \"customer\": customer,\n#                     \"is_pos\": 0,\n#                     \"so_type\": \"Cashiers\",\n#                     \"source_order\": \"IPD\",\n#                     \"posting_date\": frappe.utils.getdate(),\n#                     \"due_date\": frappe.utils.getdate(),\n#                     \"remarks\": remark,\n#                     \"insurance_coverage_amount\": insurance_coverage_amount,\n#                     \"payable_amount\": payable_amount,\n#                     \"doctype\": \"Sales Invoice\",\n#                     \"cost_center\": \"Main - HH\",\n#                     \"ref_practitioner\": practitioner,\n#                     \"items\": invoice_items,  # Add all items here\n#                 })\n#             else:\n#                 salesdoc = frappe.get_doc({\n#                     \"patient\": patient,\n#                     \"patient_name\": patient_name,\n#                     \"customer\": customer,\n#                     \"is_pos\": 0,\n#                     \"so_type\": \"Cashiers\",\n#                     \"source_order\": \"IPD\",\n#                     \"posting_date\": frappe.utils.getdate(),\n#                     \"due_date\": frappe.utils.getdate(),\n#                     \"remarks\": remark,\n#                     \"doctype\": \"Sales Invoice\",\n#                     \"cost_center\": \"Main - HH\",\n#                     \"ref_practitioner\": practitioner,\n#                     \"items\": invoice_items,  # Add all items here\n#                 })\n            \n#             # Insert and submit the sales invoice\n#             try:\n#                 salesdoc.insert()\n#                 salesdoc.submit()\n#             except Exception as e:\n#                 frappe.log_error(f\"Error while creating sales invoice: {str(e)}\", \"Sales Invoice Creation Error\")\n\n\n\n# pass\n# ip_occupancy = frappe.db.sql(\"\"\"select * from `tabInpatient Occupancy` where `left` = 0 ;\"\"\" , as_dict = True )\n# if ip_occupancy:\n    \n#     for ipo in ip_occupancy:\n#         ip = frappe.get_doc(\"Inpatient Record\" , ipo.parent)\n#         if ip.status == \"Admitted\":\n#             patientinfo = frappe.get_doc(\"Patient\" , ip.patient)\n#             service_unit_type = frappe.get_doc(\"Healthcare Service Unit Type\", frappe.db.get_value(\"Healthcare Service Unit\", ipo.service_unit, \"service_unit_type\"))\n#             patient = ip.patient\n#             patient_name = ip.patient_name\n#             customer = patientinfo.customer\n#             item_code = service_unit_type.item\n#             rate = service_unit_type.rate\n#             desc = service_unit_type.description\n#             remark = ipo.service_unit\n#             practitioner = ip.primary_practitioner\n#             medical_department = ip.medical_department\n#             patient_doc = frappe.get_doc(\"Patient\", patient)\n#             if patient_doc.insurance_policy:\n#                 policy = frappe.get_doc(\"Insurance Policy\", patient_doc.insurance_policy)   \n#                 salesdoc = frappe.get_doc({\n                           \n                         \n#                             \"patient\": patient,\n#                             \"patient_name\": patient_name,\n#                             \"customer\" : customer,\n#                             \"is_pos\" : 0,\n#                             \"so_type\": \"Cashiers\",\n#                             \"source_order\" : \"IPD\",\n#                             \"posting_date\" : frappe.utils.getdate(),\n                \n#                             'due_date' : frappe.utils.getdate(),\n                        \n#                             \"remarks\" : remark,\n#                             \"insurance_coverage_amount\": (rate * policy.coverage_limits) / 100,\n#                             \"payable_amount\": rate - ((rate * policy.coverage_limits) / 100),\n                           \n                          \n#                             \"doctype\": \"Sales Invoice\",\n#                             \"cost_center\": \"Main - HH\",\n                      \n#                             \"ref_practitioner\" : practitioner,\n                            \n#                             \"items\": [\n#                                 {\n#                                 \"item_code\": item_code,\n#                                     \"item_name\": item_code,\n#                                     \"description\": desc,\n                                 \n                \n#                                     \"qty\": 1,\n                \n#                                     \"rate\": rate,\n#                                     \"amount\": 1* rate,\n                \n                \n                \n                                  \n                \n                \n                    \n                \n#                                     \"doctype\": \"Sales Invoice Item\",\n                \n#                                 }\n#                             ],\n#                             # \"taxes\" : [{\n#                             #       \"charge_type\":\"On Net Total\",\n#                             #         \"account_head\":\"VAT - RH\",\n#                             #         \"description\": \"VAT\",\n#                             #         \"cost_center\" : \"Hospital - RH\",\n#                             #         \"rate\": 5,\n#                             # }]\n                \n#                         })\n#             else:\n                \n#                 salesdoc = frappe.get_doc({\n                           \n                         \n#                             \"patient\": patient,\n#                             \"patient_name\": patient_name,\n#                             \"customer\" : customer,\n#                             \"is_pos\" : 0,\n#                             \"so_type\": \"Cashiers\",\n#                             \"source_order\" : \"IPD\",\n#                             \"posting_date\" : frappe.utils.getdate(),\n                \n#                             'due_date' : frappe.utils.getdate(),\n                        \n#                             \"remarks\" : remark,\n\n                           \n                          \n#                             \"doctype\": \"Sales Invoice\",\n#                             \"cost_center\": \"Main - HH\",\n                      \n#                             \"ref_practitioner\" : practitioner,\n                            \n#                             \"items\": [\n#                                 {\n#                                 \"item_code\": item_code,\n#                                     \"item_name\": item_code,\n#                                     \"description\": desc,\n                                 \n                \n#                                     \"qty\": 1,\n                \n#                                     \"rate\": rate,\n#                                     \"amount\": 1* rate,\n                \n                \n                \n                                  \n                \n                \n                    \n                \n#                                     \"doctype\": \"Sales Invoice Item\",\n                \n#                                 }\n#                             ],\n#                             # \"taxes\" : [{\n#                             #       \"charge_type\":\"On Net Total\",\n#                             #         \"account_head\":\"VAT - RH\",\n#                             #         \"description\": \"VAT\",\n#                             #         \"cost_center\" : \"Hospital - RH\",\n#                             #         \"rate\": 5,\n#                             # }]\n                \n#                         })\n#             try:\n#                 salesdoc.insert()\n#                 salesdoc.submit()\n#             except:\n#                 a=\"9\"",
  "script_type": "Scheduler Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "event_frequency": "All",
  "modified": "2025-03-03 09:50:51.899699",
  "module": "HIS",
  "name": "Return Refferences",
  "reference_doctype": "Sales Invoice",
  "script": "mode_of_payment=''\npos_profile=''\ndefault_account = ''\nif doc.is_pos and doc.is_return and not doc.voucher_no:\n    pos_profile= frappe.db.get_value(\"POS Profile User\", {\"default\": 1, \"user\": frappe.session.user}, \"parent\")\n    if pos_profile:\n        mode_of_payment = frappe.db.get_value(\"POS Payment Method\",{\"parent\": pos_profile}, \"mode_of_payment\") \n    if mode_of_payment:\n        \n        default_account = frappe.db.get_value('Mode of Payment Account', {\"parent\": mode_of_payment},  'default_account')\n    if default_account:\n        doc.payments[0].mode_of_payment= mode_of_payment\n        doc.payments[0].account =default_account\n    doc.payments[0].amount= doc.grand_total\n    \n\n\nif doc.is_return and not doc.voucher_no:\n    for i in doc.items:\n        i.reference_dn=\"\"\n        i.reference_dt=\"\"\n        i.sales_invoice_item =\"\"\n        i.so_detail =\"\"\n        i.sales_order =\"\"\n        ",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 1,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Save",
  "event_frequency": "All",
  "modified": "2025-03-03 09:50:51.884812",
  "module": "HIS",
  "name": "Check Order is Billed",
  "reference_doctype": "Patient Encounter",
  "script": "if doc.services_so:\n    sales_order_service = frappe.get_doc(\"Sales Order\", doc.services_so)\n    if sales_order_service.status == \"Completed\":\n        frappe.throw(\"Service Orders already Billed so it can't change!!!\")\nif  doc.medication_so:\n    sales_order_medication = frappe.get_doc(\"Sales Order\", doc.medication_so)\n    \n    if sales_order_medication.status == \"Completed\":\n        frappe.throw(\"Pharmacy Orders already Billed so it can't change!!!\")\n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Submit",
  "event_frequency": "All",
  "modified": "2025-08-06 15:54:10.977519",
  "module": "HIS",
  "name": "Insurance Refund",
  "reference_doctype": "Sales Invoice",
  "script": "#Refurn Reverse bill to ...\nhis_settings = frappe.get_doc(\"HIS Settings\", \"HIS Settings\")\ninsurance_account = \"\"\ndebtor_account = \"\"\nif his_settings.insurance_receivable_account:\n    insurance_account = his_settings.insurance_receivable_account\nif his_settings.debtors_account:\n    debtor_account = his_settings.debtors_account\n# paid_amount = doc.paid_amount if doc.paid_amount else 0\n# difference = abs(paid_amount - doc.grand_total)\nif doc.insurance_company and doc.is_return:\n    insurance_refund_amount = abs( doc.insurance_coverage_amount)\n    abbr= frappe.db.get_value(\"Company\", doc.company, \"abbr\")\n    from_patient=frappe.db.get_value('Patient', doc.patient, 'customer')\n    from_patient_name=frappe.db.get_value('Patient', doc.patient, 'patient_name')\n    to_insurance=frappe.db.get_value('Insurance Company', doc.insurance_company, 'customer' )\n    to_insurance_name=doc.insurance_company\n    account = [\n\t\t\t\n\t\t{\n\t\t\t\"account\": frappe.db.get_value(\"Party Account\", {\"parent\": to_insurance}, \"account\") or insurance_account,\n\t\t\t\"party_type\": \"Customer\",\n\t\t\t\"party\" : to_insurance,\n\t\t\t\"credit_in_account_currency\": insurance_refund_amount,\n\t\t\t\"cost_center\": doc.cost_center\n\t\t\n\t\t},\n\t\t{\n\t\t\t\"account\": frappe.db.get_value(\"Party Account\", {\"parent\": from_patient}, \"account\") or debtor_account,\n\t\t\t'party_type': \"Customer\",\n\t\t\t\"party\" : from_patient,\n\t\t\t\"debit_in_account_currency\": insurance_refund_amount,\n\t\t\t\"cost_center\": doc.cost_center\n\t\t},\n    ]\n    # frappe.errprint(account)\n    Journal = frappe.get_doc({\n    \t\t'doctype': 'Journal Entry',\n    \t\t'voucher_type': 'Journal Entry',\n    \t\t\"posting_date\" : frappe.utils.getdate(),\n    \t\t\"user_remark\": f\"Refund from Patient  {from_patient_name} to Insurance {to_insurance_name} Invoice Number {doc.name}\",\n    \t\t\"accounts\": account,\n    \t\t\"patient\": doc.patient,\n    \t\t\"patient_name\": doc.patient_name,\n    \t\t\"sales_invoice\" : doc.name,\n    \t\t\"reference_invoice\": doc.name,\n            # \"user_remark\": _(\"Refund issued from Patient {0} to Insurance {1} against Sales Invoice {2}.\").format(patient_name, insurance_name, sales_invoice.name)\n\n    \t\t\n    \t})\n    Journal.insert(ignore_permissions = True)\n    Journal.submit()\n    frappe.db.set_value(\"Sales Invoice\", doc.name, \"reference_journal\", Journal.name)\n\n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Save",
  "event_frequency": "All",
  "modified": "2025-07-17 16:20:19.752343",
  "module": "HIS",
  "name": "Zero Rate Alert",
  "reference_doctype": "Sales Invoice",
  "script": "if doc.items:\n    for item in doc.items:\n        if item.rate == 0:\n            frappe.throw(_(f\"Rate cannot be zero for item: {item.item_code} (Row: {item.idx})\"))\n\nif doc.insurance_policy and doc.coverage_limits == 0:\n    frappe.throw(\"The Insurance coverage can not be zero!!!\")",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 1,
  "api_method": "get_patient_info",
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "event_frequency": "All",
  "modified": "2025-04-07 09:54:43.419008",
  "module": "HIS",
  "name": "API",
  "reference_doctype": null,
  "script": "# room_id = frappe.form_dict.get('room_id')\r\n# room_name = frappe.form_dict.get('room_name')\r\n\r\n# # Fetch the first matching inpatient record\r\n# inpatient_record = frappe.get_list(\"Inpatient Record\", \r\n#                                   filters={\"room\": room_name, \"status\": \"Admitted\"},\r\n#                                   fields=[\"name\", \"patient\", \"patient_name\", \"status\", \"room\", \"bed\"],\r\n#                                   limit_page_length=1)  # Fetch only one record\r\n\r\n# # if inpatient_record:\r\n# #     inpatient_record = inpatient_record[0]  # Get the first record\r\n# # else:\r\n# #     inpatient_record = None  # No admitted patient found in the room\r\n\r\n# frappe.response['message'] = inpatient_record\r\n\r\n\r\nroom_id = frappe.form_dict.get('room_id')\r\nroom_name = frappe.form_dict.get('room_name')\r\n\r\n# Bypass permission checks by using frappe.db.get_all()\r\ninpatient_record = frappe.db.get_all(\"Inpatient Record\", \r\n    filters={\"room\": room_name, \"status\": \"Admitted\"},\r\n    fields=[\"name\", \"patient\", \"patient_name\", \"status\", \"room\", \"bed\"],\r\n    limit=1\r\n)\r\n\r\nfrappe.response['message'] = inpatient_record\r\n",
  "script_type": "API"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Submit",
  "event_frequency": "All",
  "modified": "2025-05-03 15:37:31.023466",
  "module": "HIS",
  "name": "Update Credit limit Insurance",
  "reference_doctype": "Sales Invoice",
  "script": "if doc.insurance_company and not doc.is_return:\n    cust= frappe.get_doc(\"Customer\", doc.customer)\n    if cust.credit_limits:\n        for i in cust.credit_limits:\n            i.credit_limit= i.credit_limit + doc.grand_total\n    cust.save()",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Submit",
  "event_frequency": "All",
  "modified": "2025-03-20 11:41:19.396624",
  "module": "HIS",
  "name": "Decrease Credit limit Insurance",
  "reference_doctype": "Sales Invoice",
  "script": "if doc.insurance_company:\n    cust= frappe.get_doc(\"Customer\", doc.customer)\n    if cust.credit_limits:\n        for i in cust.credit_limits:\n            i.credit_limit= i.credit_limit - doc.grand_total\n    cust.save()",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 1,
  "api_method": "zone",
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "event_frequency": "All",
  "modified": "2025-08-11 14:02:06.378873",
  "module": "HIS",
  "name": "zone",
  "reference_doctype": null,
  "script": "# Template to inject\r\nrequest_params = [\r\n    {\r\n        \"id\": None,\r\n        \"english_name\": None,\r\n        \"hospital_id\": \"Hodan Hospital\",\r\n        \"head_nurse_id\": None,\r\n        \"head_nurse_name\": None,\r\n        \"head_doctor_id\": None,\r\n        \"head_doctor_name\": None,\r\n        \"department_id\": None,\r\n        \"department_name\": None,\r\n        \"building_id\": None,\r\n        \"building_name\": None,\r\n        \"enable\": 0,\r\n    }\r\n]\r\n\r\n# Valid zones (wards) - must be is_station = 1\r\n# zones = [\r\n#     {\"name\": \"Child Bed Side\"},\r\n#     {\"name\": \"Day Care (Hours)\"},\r\n#     {\"name\": \"Death Room\"},\r\n#     {\"name\": \"Dialysis\"},\r\n#     {\"name\": \"General Ward 2\"},\r\n#     {\"name\": \"General Ward Pediatric\"},\r\n#     {\"name\": \"ICU\"},\r\n#     {\"name\": \"Labour Room\"},\r\n#     {\"name\": \"Main Emergency\"},\r\n#     {\"name\": \"Mortuary\"},\r\n#     {\"name\": \"NICU\"},\r\n#     {\"name\": \"Nursery\"},\r\n#     {\"name\": \"Pediatric Emergency\"},\r\n#     {\"name\": \"Postnatal\"},\r\n#     {\"name\": \"Suit Room\"},\r\n#     {\"name\": \"Trauma Emergency\"},\r\n#     {\"name\": \"VIP Room 39 (General Ward 1)\"},\r\n#     {\"name\": \"VIP Rooms\"}\r\n# ]\r\n\r\n# Get only valid zones (wards) - must be is_station = 1\r\nzones = frappe.db.get_all(\r\n    \"Wards\",\r\n    # filters={\"disabled\": 0, \"is_station\": 1},\r\n    filters={\"disabled\": 0},\r\n    fields=[\"ward_name\"]\r\n)\r\n\r\n# Start with the template\r\ntemplate = request_params[0]\r\nresult = []\r\n\r\n# Populate result with zones\r\n\r\nfor idx, zone in enumerate(zones, start=1): \r\n    merged = {\r\n        **template,\r\n        \"id\": zone.get(\"ward_name\", \"\"),\r\n        \"name\": zone.get(\"ward_name\", \"\"),\r\n        \"english_name\": f\"zone-{idx}\",\r\n        \"description\": zone.get(\"ward_name\", \"\"),\r\n    }\r\n    result.append(merged)\r\n\r\n# Assign result to Frappe response\r\nfrappe.response[\"message\"] = result\r\n# frappe.response[\"message\"] = len(result)  # Optional: to return count instead\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n#Old API\r\n# request_params = [\r\n#     {\r\n#         \"id\": None,\r\n#         \"english_name\": None,  \r\n#         \"hospital_id\": \"Hodan Hospital\",\r\n#         \"head_nurse_id\": None,\r\n#         \"head_nurse_name\": None,\r\n#         \"head_doctor_id\": None,\r\n#         \"head_doctor_name\": None,\r\n#         \"department_id\": None,\r\n#         \"department_name\": None,\r\n#         \"building_id\": None,\r\n#         \"building_name\": None,\r\n#         \"enable\": 0,\r\n#     }\r\n# ]\r\n\r\n# # Get only valid zones (wards) - must be is_station = 1\r\n# zones = frappe.db.get_all(\r\n#     \"Healthcare Service Unit Type\",\r\n#     # filters={\"disabled\": 0, \"is_station\": 1},\r\n#     filters={\"disabled\": 0},\r\n#     fields=[\"name\", \"floor\", \"description\", \"disabled\", \"service_unit_type\"]\r\n# )\r\n\r\n# template = request_params[0]\r\n# result = []\r\n\r\n\r\n# for idx, zone in enumerate(zones, start=1): \r\n#     merged = {\r\n#         **template,\r\n#         \"id\": zone.get(\"service_unit_type\", \"\"),\r\n#         \"name\": zone.get(\"name\", \"\"),\r\n#         \"english_name\": f\"zone-{idx}\",\r\n#         \"floor\": zone.get(\"floor\", \"\"),\r\n#         \"description\": zone.get(\"description\", \"\"),\r\n#     }\r\n#     result.append(merged)\r\n\r\n# frappe.response[\"message\"] = result\r\n# # frappe.response[\"message\"] = len(result)\r\n",
  "script_type": "API"
 },
 {
  "allow_guest": 1,
  "api_method": "bed",
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "event_frequency": "All",
  "modified": "2025-08-11 14:33:42.051234",
  "module": "HIS",
  "name": "bed",
  "reference_doctype": null,
  "script": "# Initial request params\r\nrequest_params = [\r\n    {\r\n        \"id\": None,\r\n        \"room_id\": None,\r\n        \"room_name\": None,\r\n        \"zone_id\": None,\r\n        \"zone_name\": None,\r\n        \"floor\": None,\r\n        \"serial_number\": None,\r\n        \"enable\": 1,\r\n        \"nurse_id\": None,\r\n        \"nurse_name\": None,\r\n        \"description\": \"\"\r\n    }\r\n]\r\n\r\n# Step 1: Get ward types (zones)\r\nvalid_zones = frappe.db.get_all(\r\n    \"Healthcare Service Unit Type\",\r\n    # filters={\"disabled\": 0, \"is_station\": 1},\r\n    filters={\"disabled\": 0},\r\n    fields=[\"name\", \"floor\", \"ward\", \"description\", \"disabled\", \"service_unit_type\"]\r\n)\r\n\r\n\r\nvalid_zone_names = [z[\"name\"] for z in valid_zones]\r\n\r\n# Map zone name -> zone info\r\nzone_map = {z[\"name\"]: z for z in valid_zones}\r\n\r\n# Step 2: Get beds that belong to those zones\r\nbeds = frappe.db.get_all(\r\n    \"Healthcare Service Unit\",\r\n    filters={\r\n        \"disabled\": 0,\r\n        \"service_unit_type\": [\"in\", valid_zone_names]\r\n    },\r\n    fields=[\"name\", \"disabled\", \"wards\", \"floor\", \"service_unit_type\"]\r\n)\r\n\r\n# Step 3: Build response\r\ntemplate = request_params[0]\r\nresponse = []\r\n\r\nfor idx, bed in enumerate(beds, start=1):\r\n    zone = zone_map.get(bed[\"service_unit_type\"], {})\r\n    \r\n    merged = {\r\n        **template,\r\n        \"id\": bed[\"name\"],\r\n        \"name\": bed[\"name\"],\r\n        \"room_id\": bed[\"name\"],\r\n        \"room_name\": bed[\"service_unit_type\"],\r\n        # \"room_name\":  f\"rm_n-{bed['service_unit_type']}\",\r\n        \"zone_id\": zone.get(\"ward\"),\r\n        \"zone_name\": zone.get(\"ward\"),\r\n        \"floor\": zone.get(\"floor\"),\r\n        \"serial_number\": None,\r\n        \"description\": None\r\n    }\r\n    response.append(merged)\r\n\r\nfrappe.response[\"message\"] = response\r\n# frappe.response[\"message\"] = len(response)\r\n",
  "script_type": "API"
 },
 {
  "allow_guest": 1,
  "api_method": "patient",
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "event_frequency": "All",
  "modified": "2025-05-15 09:51:19.320150",
  "module": "HIS",
  "name": "patient",
  "reference_doctype": null,
  "script": "# # Request structure template\r\n# request_params = [\r\n#     {\r\n#         \"medical_card_number\": None,\r\n#         \"social_card_number\": None,\r\n#         \"country\": \"Somalia\",\r\n#         \"nation\": \"SOM\",\r\n#         \"blood_code\": \"\",\r\n#         \"contacts_name\": None,\r\n#         \"contacts_relationship\": None,\r\n#         \"contacts_phone\": None,\r\n#         \"description\": None\r\n#     }\r\n# ]\r\n\r\n# # Fetch patients with Active status\r\n# patients = frappe.db.get_all(\r\n#     \"Patient\",\r\n#     filters={\"status\": \"Active\"},\r\n#     fields=[\"name\", \"patient_name\", \"sex\", \"dob\", \"mobile_no\", \"territory\", \"blood_group\"]\r\n# )\r\n\r\n# # Base template\r\n# template = request_params[0]\r\n\r\n# # Build final structured response\r\n# response = []\r\n# for idx, patient in enumerate(patients, start=1):\r\n#     merged = {\r\n#         **template,\r\n#         \"id\": patient.get(\"name\"),\r\n#         \"name\": patient.get(\"patient_name\"),\r\n#         \"gender\": patient.get(\"sex\"),  # Consider mapping if needed: 1 = Male, 2 = Female, etc.\r\n#         \"birthday\": patient.get(\"dob\"),\r\n#         \"phone_number\": patient.get(\"mobile_no\"),\r\n#         \"id_card_number\": patient.get(\"name\"),\r\n#         \"medical_card_number\": template[\"medical_card_number\"],  # or patient.get(...) if stored elsewhere\r\n#         \"district\": patient.get(\"territory\"),\r\n#         \"address\": None,\r\n#         \"blood_code\": patient.get(\"blood_group\")\r\n#     }\r\n#     response.append(merged)\r\n\r\n# # Return the response\r\n# frappe.response['message'] = len(response)\r\n# Fetch admitted inpatients to get valid patient IDs\r\n# admitted_inpatients = frappe.db.get_all(\r\n#     \"Inpatient Record\",\r\n#     filters={\"status\": \"Admitted\"},\r\n#     fields=[\"patient\"]\r\n# )\r\n\r\n# # Extract patient IDs from admitted inpatients\r\n# admitted_patient_ids = {entry[\"patient\"] for entry in admitted_inpatients if entry.get(\"patient\")}\r\n\r\n# # Fetch patients that are Active AND in the admitted list\r\n# patients = frappe.db.get_all(\r\n#     \"Patient\",\r\n#     filters={\r\n#         \"status\": \"Active\",\r\n#         \"name\": [\"in\", list(admitted_patient_ids)]\r\n#     },\r\n#     fields=[\"name\", \"patient_name\", \"sex\", \"dob\", \"mobile_no\", \"territory\", \"blood_group\"]\r\n# )\r\n\r\n# # Request structure template\r\n# request_params = [\r\n#     {\r\n#         \"medical_card_number\": None,\r\n#         \"social_card_number\": None,\r\n#         \"country\": \"Somalia\",\r\n#         \"nation\": \"SOM\",\r\n#         \"blood_code\": \"\",\r\n#         \"contacts_name\": None,\r\n#         \"contacts_relationship\": None,\r\n#         \"contacts_phone\": None,\r\n#         \"description\": None\r\n#     }\r\n# ]\r\n\r\n# # Base template\r\n# template = request_params[0]\r\n\r\n# # Build final structured response\r\n# response = []\r\n# for idx, patient in enumerate(patients, start=1):\r\n#     merged = {\r\n#         **template,\r\n#         \"id\": patient.get(\"name\"),\r\n#         \"name\": patient.get(\"patient_name\"),\r\n#         \"gender\": patient.get(\"sex\"),\r\n#         \"birthday\": patient.get(\"dob\"),\r\n#         \"phone_number\": patient.get(\"mobile_no\"),\r\n#         \"id_card_number\": patient.get(\"name\"),\r\n#         \"medical_card_number\": template[\"medical_card_number\"],\r\n#         \"district\": patient.get(\"territory\"),\r\n#         \"address\": None,\r\n#         \"blood_code\": patient.get(\"blood_group\")\r\n#     }\r\n#     response.append(merged)\r\n\r\n# # Return the response\r\n# frappe.response['message'] = response\r\n\r\n\r\n\r\n# Get admitted patients from Inpatient Record\r\nadmitted_inpatients = frappe.db.get_all(\r\n    \"Inpatient Record\",\r\n    filters={\"status\": \"Admitted\"},\r\n    fields=[\"patient\"]\r\n)\r\n\r\n# Unique patient IDs\r\nadmitted_patient_ids = {entry[\"patient\"] for entry in admitted_inpatients if entry.get(\"patient\")}\r\n\r\n# Fetch patient data\r\npatients = frappe.db.get_all(\r\n    \"Patient\",\r\n    filters={\r\n        \"status\": \"Active\",\r\n        \"name\": [\"in\", list(admitted_patient_ids)]\r\n    },\r\n    fields=[\"name\", \"patient_name\", \"sex\", \"dob\", \"mobile_no\", \"territory\", \"blood_group\"]\r\n)\r\n\r\n# Static base template\r\ntemplate = {\r\n    \"medical_card_number\": None,\r\n    \"social_card_number\": None,\r\n    \"country\": \"Somalia\",\r\n    \"nation\": \"SOM\",\r\n    \"blood_code\": \"\",\r\n    \"contacts_name\": None,\r\n    \"contacts_relationship\": None,\r\n    \"contacts_phone\": None,\r\n    \"description\": None\r\n}\r\n\r\n# Build final structured response\r\nresponse = []\r\n\r\nfor idx, patient in enumerate(patients, start=1):\r\n    # Normalize gender\r\n    raw_gender = (patient.get(\"sex\") or \"\").strip().lower()\r\n    gender = 1 if raw_gender == \"male\" else 2 if raw_gender == \"female\" else None\r\n\r\n    merged = {\r\n        **template,\r\n        \"id\": patient.get(\"name\"),\r\n        \"name\": patient.get(\"patient_name\"),\r\n        \"gender\": gender,  # now numeric\r\n        \"birthday\": str(patient.get(\"dob\")) if patient.get(\"dob\") else None,\r\n        \"phone_number\": patient.get(\"mobile_no\"),\r\n        \"id_card_number\": patient.get(\"name\"),\r\n        \"district\": patient.get(\"territory\"),\r\n        \"address\": None,\r\n        \"blood_code\": patient.get(\"blood_group\")\r\n    }\r\n    response.append(merged)\r\n\r\n# Return the final message\r\nfrappe.response['message'] = response\r\n\r\n",
  "script_type": "API"
 },
 {
  "allow_guest": 1,
  "api_method": "inpatient",
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "event_frequency": "All",
  "modified": "2025-05-15 11:34:20.154696",
  "module": "HIS",
  "name": "Inpatient",
  "reference_doctype": null,
  "script": "# # Load valid zone types (same as /zone)\r\n# valid_zones = frappe.db.get_all(\r\n#     \"Healthcare Service Unit Type\",\r\n#     filters={\"disabled\": 0, \"is_station\": 1},\r\n#     fields=[\"name\"]\r\n# )\r\n# zone_name_set = set([z[\"name\"] for z in valid_zones])\r\n\r\n# # Load valid beds (same as /bed)\r\n# valid_beds = frappe.db.get_all(\r\n#     \"Healthcare Service Unit\",\r\n#     filters={\r\n#         \"disabled\": 0,\r\n#         \"service_unit_type\": [\"in\", list(zone_name_set)]\r\n#     },\r\n#     fields=[\"name\"]\r\n# )\r\n# bed_name_set = set([b[\"name\"] for b in valid_beds])\r\n\r\n# # Load inpatient records with gender directly from Inpatient Record\r\n# inpatients = frappe.db.get_all(\r\n#     \"Inpatient Record\",\r\n#     filters={\"status\": \"Admitted\"},\r\n#     fields=[\r\n#         \"name\",\r\n#         \"patient_name\",\r\n#         \"patient\",\r\n#         \"gender\",\r\n#         \"room\",  # zone_id\r\n#         \"bed\",   # bed_id\r\n#         \"admission_practitioner\",\r\n#         \"primary_practitioner\",\r\n#         \"status\",\r\n#         \"admitted_datetime\",\r\n#         \"discharge_datetime\"\r\n#     ]\r\n# )\r\n\r\n# # Template\r\n# response_template = {\r\n#     \"room_id\": None,\r\n#     \"bed_id\": None,\r\n#     \"nurse_id\": None,\r\n#     \"nurse_name\": None,\r\n#     \"head_nurse_id\": None,\r\n#     \"head_nurse_name\": None,\r\n#     \"head_doctor_id\": None,\r\n#     \"head_doctor_name\": None,\r\n#     \"care_level\": None,\r\n#     \"checkin_date\": \"\",\r\n#     \"inspection_id\": None,\r\n#     \"checkout_date\": \"\",\r\n#     \"transfer_time\": None,\r\n#     \"checkin_place\": None,\r\n#     \"new_inpatient_flag\": None,\r\n#     \"conceal_condition\": None,\r\n#     \"unconfirmed_medical_advice\": None,\r\n#     \"visit_card\": None,\r\n#     \"insurance_type\": None,\r\n#     \"contacts_name\": None,\r\n#     \"contacts_relationship\": None,\r\n#     \"contacts_phone\": None,\r\n#     \"checkin_diagnose\": None,\r\n#     \"is_new_born\": None,\r\n#     \"major_diseases_flag\": None,\r\n#     \"allergy_flag\": None,\r\n#     \"critical_flag\": None,\r\n#     \"critical_value\": None,\r\n#     \"multi_drug\": None,\r\n#     \"description\": None,\r\n#     \"visit_id\": None,\r\n#     \"inpatient_password\": None,\r\n#     \"hospital_id\": \"Hodan Hospital\",\r\n#     \"research\": None,\r\n#     \"department_id\": None,\r\n#     \"department_name\": None\r\n# }\r\n\r\n# # Final output\r\n# valid_response = []\r\n\r\n# for idx, record in enumerate(inpatients, start=1):\r\n#     room = record.get(\"room\")\r\n#     bed = record.get(\"bed\")\r\n\r\n#     if not room or not bed or room not in zone_name_set or bed not in bed_name_set:\r\n#         continue\r\n\r\n#     # Format date\r\n#     checkin_dt = record.get(\"admitted_datetime\")\r\n#     checkout_dt = record.get(\"discharge_datetime\")\r\n\r\n#     # Convert gender to numeric\r\n#     gender_raw = record.get(\"gender\")\r\n#     gender = 1 if gender_raw == \"Male\" else 2 if gender_raw == \"Female\" else None\r\n\r\n#     merged = {\r\n#         **response_template,\r\n#         \"id\": str(idx).zfill(2),\r\n#         \"patient_id\": record.get(\"patient\"),\r\n#         \"patient_name\": record.get(\"patient_name\"),\r\n#         \"gender\": gender,\r\n#         \"zone_id\": room,\r\n#         \"room_id\": room,\r\n#         \"bed_id\": bed,\r\n#         \"doctor_id\": record.get(\"admission_practitioner\"),\r\n#         \"doctor_name\": record.get(\"admission_practitioner\"),\r\n#         \"status\": record.get(\"status\"),\r\n#         \"checkin_date\": str(checkin_dt) if checkin_dt else \"\",\r\n#         \"checkout_date\": str(checkout_dt) if checkout_dt else \"\"\r\n#     }\r\n\r\n#     valid_response.append(merged)\r\n\r\n# # Set the response\r\n# frappe.response[\"message\"] = valid_response\r\n\r\n\r\n\r\n# Load valid zone types\r\nvalid_zones = frappe.db.get_all(\r\n    \"Healthcare Service Unit Type\",\r\n    filters={\"disabled\": 0, \"is_station\": 1},\r\n    fields=[\"name\"]\r\n)\r\nzone_name_set = set([z[\"name\"] for z in valid_zones])\r\n\r\n# Load valid beds\r\nvalid_beds = frappe.db.get_all(\r\n    \"Healthcare Service Unit\",\r\n    filters={\r\n        \"disabled\": 0,\r\n        \"service_unit_type\": [\"in\", list(zone_name_set)]\r\n    },\r\n    fields=[\"name\"]\r\n)\r\nbed_name_set = set([b[\"name\"] for b in valid_beds])\r\n\r\n# Load admitted inpatients\r\ninpatients = frappe.db.get_all(\r\n    \"Inpatient Record\",\r\n    filters={\"status\": \"Admitted\"},\r\n    fields=[\r\n        \"name\",\r\n        \"patient_name\",\r\n        \"patient\",\r\n        \"gender\",\r\n        \"room\",\r\n        \"bed\",\r\n        \"admission_practitioner\",\r\n        \"primary_practitioner\",\r\n        \"status\",\r\n        \"admitted_datetime\",\r\n        \"discharge_datetime\"\r\n    ]\r\n)\r\n\r\n# Response template\r\nresponse_template = {\r\n    \"room_id\": None,\r\n    \"bed_id\": None,\r\n    \"nurse_id\": None,\r\n    \"nurse_name\": None,\r\n    \"head_nurse_id\": None,\r\n    \"head_nurse_name\": None,\r\n    \"head_doctor_id\": None,\r\n    \"head_doctor_name\": None,\r\n    \"care_level\": None,\r\n    \"checkin_date\": \"\",\r\n    \"inspection_id\": None,\r\n    \"checkout_date\": \"\",\r\n    \"transfer_time\": None,\r\n    \"checkin_place\": None,\r\n    \"new_inpatient_flag\": None,\r\n    \"conceal_condition\": None,\r\n    \"unconfirmed_medical_advice\": None,\r\n    \"visit_card\": None,\r\n    \"insurance_type\": None,\r\n    \"contacts_name\": None,\r\n    \"contacts_relationship\": None,\r\n    \"contacts_phone\": None,\r\n    \"checkin_diagnose\": None,\r\n    \"is_new_born\": None,\r\n    \"major_diseases_flag\": None,\r\n    \"allergy_flag\": None,\r\n    \"critical_flag\": None,\r\n    \"critical_value\": None,\r\n    \"multi_drug\": None,\r\n    \"description\": None,\r\n    \"visit_id\": None,\r\n    \"inpatient_password\": None,\r\n    \"hospital_id\": \"Hodan Hospital\",\r\n    \"research\": None,\r\n    \"department_id\": None,\r\n    \"department_name\": None\r\n}\r\n\r\n# Final list\r\nvalid_response = []\r\n\r\nfor idx, record in enumerate(inpatients, start=1):\r\n    room = record.get(\"room\")\r\n    bed = record.get(\"bed\")\r\n\r\n    # Skip invalid zone/bed\r\n    if not room or not bed or room not in zone_name_set or bed not in bed_name_set:\r\n        continue\r\n\r\n    # Format datetime using frappe.utils (without import)\r\n    checkin_dt = record.get(\"admitted_datetime\")\r\n    checkout_dt = record.get(\"discharge_datetime\")\r\n\r\n    formatted_checkin = frappe.utils.format_datetime(checkin_dt, \"yyyy-MM-dd HH:mm:ss\") if checkin_dt else \"\"\r\n    formatted_checkout = frappe.utils.format_datetime(checkout_dt, \"yyyy-MM-dd HH:mm:ss\") if checkout_dt else \"\"\r\n\r\n    # Convert gender to numeric\r\n    gender_raw = (record.get(\"gender\") or \"\").strip().lower()\r\n    gender = 1 if gender_raw == \"male\" else 2 if gender_raw == \"female\" else None\r\n\r\n    merged = {\r\n        **response_template,\r\n        # \"id\": str(idx).zfill(2),\r\n        \"id\": record.get(\"patient\"),\r\n        \"patient_id\": record.get(\"patient\"),\r\n        \"patient_name\": record.get(\"patient_name\"),\r\n        # \"gender\": gender,\r\n        \"zone_id\": room,\r\n        \"room_id\": room,\r\n        \"bed_id\": bed,\r\n        \"doctor_id\": record.get(\"admission_practitioner\"),\r\n        \"doctor_name\": record.get(\"admission_practitioner\"),\r\n        \"status\": record.get(\"status\"),\r\n        \"checkin_date\": formatted_checkin,\r\n        \"checkout_date\": formatted_checkout\r\n    }\r\n\r\n    valid_response.append(merged)\r\n\r\n# Return final response\r\nfrappe.response[\"message\"] = valid_response\r\n",
  "script_type": "API"
 },
 {
  "allow_guest": 1,
  "api_method": "employee",
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "event_frequency": "All",
  "modified": "2025-04-07 09:54:43.362242",
  "module": "HIS",
  "name": "employee",
  "reference_doctype": null,
  "script": "\r\nrequest_params = [\r\n  {\r\n\"id\": \"None\",\r\n\r\n\r\n\"type\": \"None\",\r\n\"expert_flag\": \"None\",\r\n\r\n\"duty\": \"None \",\r\n\r\n\"zone_id\":\"None\",\r\n\r\n\r\n\"medical_card_number\": \"None\",\r\n\"education\": \"None\",\r\n\"school\": \"None \",\r\n\"country\": \"Somalia\",\r\n\"nation\": \"Som\",\r\n\"district\": \"None\",\r\n\r\n\"portrait\": \"None\",\r\n\"description\": \"None\"\r\n} \r\n]\r\n\r\n# Bypass permission checks by using frappe.db.get_all()\r\nzones = frappe.db.get_all(\"Employee\", \r\n    filters={ \"status\": \"Active\"},\r\n    # fields=[ \"name\" , \"employee_name\", \"gender\", \"designation\", \"department\", \r\n    # \"date_of_birth\", \"id_number\", \"mobile_no\", \"current_address\", \"image\"]\r\n    fields = [\"*\"]\r\n)\r\nextra_fields = request_params[0]  # assuming only one dict in list\r\nzones = [\r\n    {**zone, **extra_fields, \"id\": zone[\"name\"], \"portrait\": zone[\"image\"]\r\n   } for zone in zones]\r\n\r\n\r\n\r\nfrappe.response['message'] = zones",
  "script_type": "API"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 1,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Save",
  "event_frequency": "All",
  "modified": "2025-04-06 08:28:51.718233",
  "module": "HIS",
  "name": "Membership Discount",
  "reference_doctype": "Sales Invoice",
  "script": "if doc.customer_group == \"Membership\" and doc.so_type == \"Cashiers\":\n    doc.additional_discount_percentage = 50",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 1,
  "api_method": "inpatient_care_label",
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "event_frequency": "All",
  "modified": "2025-05-15 11:00:12.238562",
  "module": "HIS",
  "name": "InPatient care",
  "reference_doctype": null,
  "script": "\n\n# Request parameter template\nrequest_params = [\n    {\n        \"type\": \"record\"\n    }\n]\n\n# Fetch admitted inpatients\nrecords = frappe.db.get_all(\n    \"Inpatient Record\",\n    filters={\"status\": \"Admitted\"},\n    fields=[\"name\", \"patient\", \"primary_practitioner\"]\n)\n\n# Template with default/extra values\ntemplate = request_params[0]\n\n# Merge records with template\nresponse = []\nfor record in records:\n    merged = {\n        **template,\n        \"id\": record.get(\"name\"),\n        \"inpatient_id\": record.get(\"patient\"),\n        \"patient_id\": record.get(\"patient\"),\n        \"care_label_name\": record.get(\"primary_practitioner\")\n    }\n    response.append(merged)\n\n# Return final response\nfrappe.response[\"message\"] = response\n\n\n# # Request parameter template\n# template = {\n#     \"type\": \"record\"\n# }\n\n# # Fetch all admitted inpatients\n# records = frappe.db.get_all(\n#     \"Inpatient Record\",\n#     filters={\"status\": \"Admitted\"},\n#     fields=[\"name\", \"patient\", \"primary_practitioner\"]\n# )\n\n# # Prepare final response\n# response = []\n\n# for record in records:\n#     merged = {\n#         **template,\n#         \"id\": record.get(\"name\"),\n#         \"inpatient_id\": record.get(\"name\"),            # This is the inpatient record ID\n#         \"patient_id\": record.get(\"patient\"),           # This is the patient ID\n#         \"care_label_name\": record.get(\"primary_practitioner\")\n#     }\n#     response.append(merged)\n\n# # Set response\n# frappe.response[\"message\"] = response\n",
  "script_type": "API"
 },
 {
  "allow_guest": 1,
  "api_method": "order",
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "event_frequency": "All",
  "modified": "2025-04-07 09:54:43.340302",
  "module": "HIS",
  "name": "Order",
  "reference_doctype": null,
  "script": "request_params = [\n    {\n        \"id\": \"\",\n        \"inpatient_id\": \"01\",\n        \"type\": 1,\n        \"make_time\": \"2022-03-09 12:00:00\",\n        \"make_doctor_name\": \"TOM\",\n        \"make_doctor_id\": \"11111111\",\n        \"content\": \"Urine routine\",\n        \"executive_time\": \"2022-03-09 12:00:00\",\n        \"status\": 1,\n        \"period\": 1,\n        \"qty\": \"15\",\n        \"num\": \"2\",\n        \"unit\": \"ml\",\n        \"instr\": \"\",\n        \"freq\": \"\"\n    }\n]\n\n# Fetch all Drug Prescription child rows under Doctor Plan\nzones = frappe.db.get_all(\"IPD Drug Prescription\", \n    filters={\n        \"parenttype\": \"Doctor Plan\",\n        \"parentfield\": \"drug_prescription\"  # this MUST be correct fieldname\n    },\n    fields=[\"*\"]\n)\n\n# Add extra fields from request_params[0]\nextra_fields = request_params[0]\n\nzones = [\n    {\n        **zone,\n        **extra_fields,\n        \"id\": zone[\"name\"],\n        \"patient_id\": zone.get(\"patient\")  # use .get in case \"patient\" is not always present\n    } for zone in zones\n]\n\nfrappe.response[\"message\"] = zones\n",
  "script_type": "API"
 },
 {
  "allow_guest": 1,
  "api_method": "room",
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "event_frequency": "All",
  "modified": "2025-08-11 13:54:39.165185",
  "module": "HIS",
  "name": "Room",
  "reference_doctype": null,
  "script": "request_params = [\r\n  {\r\n    \"id\": \"\",\r\n    \"name\": \"\",\r\n    \"zone_id\": \"\",\r\n    \"zone_name\": \"\",\r\n    \"description\": \"\",\r\n    \"enable\": 1,\r\n    \"floor\": None,\r\n    \"bedNumber\": 0\r\n  } \r\n]\r\n\r\n# Your existing ward names and room fetch as before\r\nward_names = [\r\n    \"Child Bed Side\", \"Day Care (Hours)\", \"Death Room\", \"Dialysis\",\r\n    \"General Ward 2\", \"General Ward Pediatric\", \"ICU\", \"Labour Room\",\r\n    \"Main Emergency\", \"Mortuary\", \"NICU\", \"Nursery\", \"Pediatric Emergency\",\r\n    \"Postnatal\", \"Suit Room\", \"Trauma Emergency\", \"VIP Room 39 (General Ward 1)\",\r\n    \"VIP Rooms\"\r\n]\r\n\r\nrooms = frappe.db.get_all(\"Healthcare Service Unit Type\", \r\n    filters={\"ward\": [\"in\", ward_names]},\r\n    fields=[\"name\", \"ward\", \"floor\"]\r\n)\r\n\r\nbed_counts = frappe.db.sql(\r\n    \"\"\"\r\n    SELECT service_unit_type AS room_name, COUNT(*) AS bed_count\r\n    FROM `tabHealthcare Service Unit`\r\n    GROUP BY service_unit_type\r\n    \"\"\", as_dict=True\r\n)\r\n\r\nbed_count_map = {row.room_name: row.bed_count for row in bed_counts}\r\n\r\n# Update request_params with data from rooms and beds\r\nupdated_params = []\r\nfor room in rooms:\r\n    # Start with a copy of your base request_params dict (to avoid overwriting)\r\n    base = request_params[0].copy()\r\n    \r\n    base.update({\r\n        \"id\": room[\"name\"],\r\n        \"name\": room[\"name\"],\r\n        \"zone_name\": room[\"ward\"],\r\n        \"floor\": room[\"floor\"],\r\n        \"bedNumber\": bed_count_map.get(room[\"name\"], 0),\r\n        \"zone_id\": room[\"ward\"],   # or another unique identifier if you have\r\n        \"description\": \"\",         # add if you have descriptions\r\n    })\r\n    \r\n    updated_params.append(base)\r\n\r\nfrappe.response['message'] = updated_params\r\n\r\n\r\n\r\n# request_params = [\r\n#   {\r\n# \"id\": \"\",\r\n# \"name\": \"\",\r\n# \"zone_id\": \"\",\r\n# \"zone_name\": \"\",\r\n# \"description\": \"\",\r\n# \"enable\": 1,\r\n# \"floor\": None,\r\n# \"bedNumber\": 0\r\n# } \r\n# ]\r\n\r\n# # List of ward names to filter\r\n# ward_names = [\r\n#     \"Child Bed Side\", \"Day Care (Hours)\", \"Death Room\", \"Dialysis\",\r\n#     \"General Ward 2\", \"General Ward Pediatric\", \"ICU\", \"Labour Room\",\r\n#     \"Main Emergency\", \"Mortuary\", \"NICU\", \"Nursery\", \"Pediatric Emergency\",\r\n#     \"Postnatal\", \"Suit Room\", \"Trauma Emergency\", \"VIP Room 39 (General Ward 1)\",\r\n#     \"VIP Rooms\"\r\n# ]\r\n\r\n# # Get all matching room types\r\n# rooms = frappe.db.get_all(\"Healthcare Service Unit Type\", \r\n#     filters={\"ward\": [\"in\", ward_names]},\r\n#     fields=[\"name\", \"ward\", \"floor\"]\r\n# )\r\n\r\n# # Create a mapping of room name to bed count\r\n# bed_counts = frappe.db.sql(\r\n#     \"\"\"\r\n#     SELECT service_unit_type AS room_name, COUNT(*) AS bed_count\r\n#     FROM `tabHealthcare Service Unit`\r\n#     GROUP BY service_unit_type\r\n#     \"\"\", as_dict=True\r\n# )\r\n\r\n# # Convert to dict for easier lookup\r\n# bed_count_map = {row.room_name: row.bed_count for row in bed_counts}\r\n\r\n# # Assemble response\r\n# result = []\r\n# for idx, room in enumerate(rooms, start=1):\r\n#     result.append({\r\n#         \"id\": room[\"name\"],\r\n#         \"name\": room[\"name\"],\r\n#         \"zone_name\": room[\"ward\"],\r\n#         \"floor\": room[\"floor\"],\r\n#         \"bedNumber\": bed_count_map.get(room[\"name\"], 0)\r\n#     })\r\n\r\n# # Return as response\r\n# frappe.response['message'] = result",
  "script_type": "API"
 },
 {
  "allow_guest": 1,
  "api_method": "department",
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "event_frequency": "All",
  "modified": "2025-04-07 09:54:43.319797",
  "module": "HIS",
  "name": "Deparment",
  "reference_doctype": null,
  "script": "\r\nrequest_params = [\r\n  {\r\n\"id\": \"1267\",\r\n\"name\": \"Bed 17-19\",\r\n\"zone_id\": \"1901\",\r\n\"zone_name\": \"Orthopedic Ward 1\",\r\n\"description\": \"123\",\r\n\"enable\": 1,\r\n\"floor\": 1,\r\n\"bedNumber\": 8\r\n} \r\n]\r\n\r\n# Bypass permission checks by using frappe.db.get_all()\r\nzones = frappe.db.get_all(\"Medical Department\", \r\n    # filters={ \"status\": \"Active\"},\r\n    fields = [\"*\"]\r\n)\r\nextra_fields = request_params[0]  # assuming only one dict in list\r\nzones = [\r\n    {**zone, **extra_fields, \"id\": zone[\"name\"]\r\n   } for zone in zones]\r\n\r\n\r\n\r\nfrappe.response['message'] = zones",
  "script_type": "API"
 },
 {
  "allow_guest": 1,
  "api_method": "in_patient_plan",
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "event_frequency": "All",
  "modified": "2025-04-07 09:54:43.309276",
  "module": "HIS",
  "name": "In patient plan",
  "reference_doctype": null,
  "script": "\r\nrequest_params = [\r\n  {\r\n\"id\": \"1267\",\r\n} \r\n]\r\n\r\n# Bypass permission checks by using frappe.db.get_all()\r\nzones = frappe.db.get_all(\"Doctor Note\", \r\n    # filters={ \"status\": \"Active\"},\r\n    fields = [\"*\"]\r\n)\r\nextra_fields = request_params[0]  # assuming only one dict in list\r\nzones = [\r\n    {**zone, **extra_fields, \"id\": zone[\"name\"]\r\n   } for zone in zones]\r\n\r\n\r\n\r\nfrappe.response['message'] = zones",
  "script_type": "API"
 },
 {
  "allow_guest": 1,
  "api_method": "operation_schedules",
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "event_frequency": "All",
  "modified": "2025-04-07 09:54:43.298430",
  "module": "HIS",
  "name": "Operation schedule",
  "reference_doctype": null,
  "script": "\r\nrequest_params = [\r\n  {\r\n\"id\": \"1267\",\r\n} \r\n]\r\n\r\n# Bypass permission checks by using frappe.db.get_all()\r\nzones = frappe.db.get_all(\"OT Schedule\", \r\n    # filters={ \"status\": \"Active\"},\r\n    fields = [\"*\"]\r\n)\r\nextra_fields = request_params[0]  # assuming only one dict in list\r\nzones = [\r\n    {**zone, **extra_fields, \"id\": zone[\"name\"]\r\n   } for zone in zones]\r\n\r\n\r\n\r\nfrappe.response['message'] = zones",
  "script_type": "API"
 },
 {
  "allow_guest": 1,
  "api_method": "laborotry_api",
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "event_frequency": "All",
  "modified": "2025-04-07 09:54:43.288241",
  "module": "HIS",
  "name": "Laborotry",
  "reference_doctype": null,
  "script": "\r\nrequest_params = [\r\n  {\r\n\"id\": \"1267\",\r\n} \r\n]\r\n\r\n# Bypass permission checks by using frappe.db.get_all()\r\nzones = frappe.db.get_all(\"Sample Collection\", \r\n    # filters={ \"status\": \"Active\"},\r\n    fields = [\"*\"]\r\n)\r\nextra_fields = request_params[0]  # assuming only one dict in list\r\nzones = [\r\n    {**zone, **extra_fields, \"id\": zone[\"name\"]\r\n   } for zone in zones]\r\n\r\n\r\n\r\nfrappe.response['message'] = zones",
  "script_type": "API"
 },
 {
  "allow_guest": 1,
  "api_method": "laborotry_schedule",
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "event_frequency": "All",
  "modified": "2025-04-07 09:54:43.277792",
  "module": "HIS",
  "name": "Laborotry schedule Api",
  "reference_doctype": null,
  "script": "\r\nrequest_params = [\r\n  {\r\n\"id\": \"1267\",\r\n} \r\n]\r\n\r\n# Bypass permission checks by using frappe.db.get_all()\r\nzones = frappe.db.get_all(\"Sample Collection\", \r\n    filters={ \"docstatus\": 0},\r\n    fields = [\"*\"]\r\n)\r\nextra_fields = request_params[0]  # assuming only one dict in list\r\nzones = [\r\n    {**zone, **extra_fields, \"id\": zone[\"name\"]\r\n   } for zone in zones]\r\n\r\n\r\n\r\nfrappe.response['message'] = zones",
  "script_type": "API"
 },
 {
  "allow_guest": 1,
  "api_method": "examines",
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "event_frequency": "All",
  "modified": "2025-04-07 09:54:43.266079",
  "module": "HIS",
  "name": "Examine Api",
  "reference_doctype": null,
  "script": "\r\nrequest_params = [\r\n  {\r\n\"id\": \"1267\",\r\n} \r\n]\r\n\r\n# Bypass permission checks by using frappe.db.get_all()\r\nzones = frappe.db.get_all(\"Radiology\", \r\n    # filters={ \"docstatus\": 0},\r\n    fields = [\"*\"]\r\n)\r\nextra_fields = request_params[0]  # assuming only one dict in list\r\nzones = [\r\n    {**zone, **extra_fields, \"id\": zone[\"name\"]\r\n   } for zone in zones]\r\n\r\n\r\n\r\nfrappe.response['message'] = zones",
  "script_type": "API"
 },
 {
  "allow_guest": 1,
  "api_method": "handover",
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "event_frequency": "All",
  "modified": "2025-04-07 09:54:43.252900",
  "module": "HIS",
  "name": "Handover api",
  "reference_doctype": null,
  "script": "\r\nrequest_params = [\r\n  {\r\n\"id\": \"1267\",\r\n} \r\n]\r\n\r\n# Bypass permission checks by using frappe.db.get_all()\r\nzones = frappe.db.get_all(\"Nursing Handover\", \r\n    # filters={ \"docstatus\": 0},\r\n    fields = [\"*\"]\r\n)\r\nextra_fields = request_params[0]  # assuming only one dict in list\r\nzones = [\r\n    {**zone, **extra_fields, \"id\": zone[\"name\"]\r\n   } for zone in zones]\r\n\r\n\r\n\r\nfrappe.response['message'] = zones",
  "script_type": "API"
 },
 {
  "allow_guest": 1,
  "api_method": "inpatient_drug",
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "event_frequency": "All",
  "modified": "2025-04-07 09:54:43.239565",
  "module": "HIS",
  "name": "Inpatient drug api",
  "reference_doctype": null,
  "script": "request_params = [\n    {\n        \"id\": \"\",\n    }\n]\n\n# Fetch all Drug Prescription child rows under Doctor Plan\nzones = frappe.db.get_all(\"IPD Drug Prescription\", \n    filters={\n        \"parenttype\": \"Doctor Plan\",\n        \"parentfield\": \"drug_prescription\"  # this MUST be correct fieldname\n    },\n    fields=[\"*\"]\n)\n\n# Add extra fields from request_params[0]\nextra_fields = request_params[0]\n\nzones = [\n    {\n        **zone,\n        **extra_fields,\n        \"id\": zone[\"name\"],\n        \"patient_id\": zone.get(\"patient\")  # use .get in case \"patient\" is not always present\n    } for zone in zones\n]\n\nfrappe.response[\"message\"] = zones\n",
  "script_type": "API"
 },
 {
  "allow_guest": 1,
  "api_method": "nursing_record",
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "event_frequency": "All",
  "modified": "2025-04-07 09:54:43.225743",
  "module": "HIS",
  "name": "Nursing record  api",
  "reference_doctype": null,
  "script": "request_params = [\n    {\n        \"id\": \"\",\n    }\n]\n\n# Fetch all Drug Prescription child rows under Doctor Plan\nzones = frappe.db.get_all(\"Vital Signs\", \n    \n    fields=[\"*\"]\n)\n\n# Add extra fields from request_params[0]\nextra_fields = request_params[0]\n\nzones = [\n    {\n        **zone,\n        **extra_fields,\n        \"id\": zone[\"name\"],\n        \"patient_id\": zone.get(\"patient\")  # use .get in case \"patient\" is not always present\n    } for zone in zones\n]\n\nfrappe.response[\"message\"] = zones\n",
  "script_type": "API"
 },
 {
  "allow_guest": 1,
  "api_method": "laboratory_results",
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "event_frequency": "All",
  "modified": "2025-04-07 09:54:43.185514",
  "module": "HIS",
  "name": "laboratory_result",
  "reference_doctype": null,
  "script": "\r\nrequest_params = [\r\n  {\r\n\"id\": \"1267\",\r\n} \r\n]\r\n\r\n# Bypass permission checks by using frappe.db.get_all()\r\nzones = frappe.db.get_all(\"Lab Result\", \r\n    # filters={ \"status\": \"Active\"},\r\n    fields = [\"*\"]\r\n)\r\nextra_fields = request_params[0]  # assuming only one dict in list\r\nzones = [\r\n    {**zone, **extra_fields, \"id\": zone[\"name\"]\r\n   } for zone in zones]\r\n\r\n\r\n\r\nfrappe.response['message'] = zones",
  "script_type": "API"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Submit",
  "event_frequency": "All",
  "modified": "2025-08-06 15:54:11.037677",
  "module": "HIS",
  "name": "Salary Payments",
  "reference_doctype": "Salary Payments",
  "script": "account = []\r\npayable_account = frappe.db.get_value(\"Payroll Entry\", doc.payroll_entry, \"payroll_payable_account\")\r\ncost_center = frappe.db.get_value(\"Payroll Entry\", doc.payroll_entry, \"cost_center\")\r\n\r\nif doc.salary_payments_details:\r\n    # Debit account for total salary payment\r\n    account.append({\r\n        \"account\": doc.account,\r\n        \"credit_in_account_currency\": doc.total_payment,\r\n        \"cost_center\": cost_center\r\n        \r\n    })\r\n\r\n    # Credit payable accounts for each employee\r\n    for i in doc.salary_payments_details:\r\n        if i.payment>0:\r\n            account.append({\r\n                \"account\": payable_account,\r\n                \"party_type\": \"Employee\",\r\n                \"party\": i.employee,\r\n                \"party_name\": i.employee_name,\r\n                \"debit_in_account_currency\": i.payment,\r\n                \"cost_center\": cost_center\r\n            })\r\n\r\n    # Create and submit the Journal Entry\r\n    jou = frappe.get_doc({\r\n        \"doctype\": \"Journal Entry\",\r\n        \"voucher_type\": \"Journal Entry\",\r\n        \"posting_date\": doc.posting_date,\r\n        \"user_remark\": f\"Salary Payments from {doc.from_date} to {doc.to_date}\",\r\n        \"accounts\": account,\r\n        \"salary_payments\": doc.name\r\n    })\r\n    jou.insert()\r\n    jou.submit()\r\n\r\n    # Update paid_amount in salary slips\r\n    for i in doc.salary_payments_details:\r\n        salary_slip = frappe.get_doc(\"Salary Slip\", i.salary_slip)\r\n        salary_slip.paid_amount = float(salary_slip.paid_amount) + float(i.payment)\r\n        salary_slip.save()\r\n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Cancel",
  "event_frequency": "All",
  "modified": "2025-08-06 15:54:11.092263",
  "module": "HIS",
  "name": "Cancel Salary Payments",
  "reference_doctype": "Salary Payments",
  "script": "if doc.salary_payments_details:\r\n    for i in doc.salary_payments_details:\r\n        salary_slip = frappe.get_doc(\"Salary Slip\", i.salary_slip)\r\n        salary_slip.paid_amount = float(salary_slip.paid_amount) - float(i.payment)\r\n        salary_slip.save()\r\nif doc.docstatus ==2:\r\n    frappe.db.set_value(\"Salary Payments\", doc.name, \"payroll_entry\", \"\")",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Cancel",
  "event_frequency": "All",
  "modified": "2025-08-06 15:54:11.065513",
  "module": "HIS",
  "name": "Cancel Salary Payment",
  "reference_doctype": "Journal Entry",
  "script": "if doc.salary_payments:\r\n    salary_payment_doc = frappe.get_doc(\"Salary Payments\", doc.salary_payments)\r\n    salary_payment_doc.cancel()",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 1,
  "api_method": "zones",
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "event_frequency": "All",
  "modified": "2025-08-11 11:19:42.380692",
  "module": "HIS",
  "name": "zones",
  "reference_doctype": null,
  "script": "# Template to inject\r\nrequest_params = [\r\n    {\r\n        \"id\": None,\r\n        \"english_name\": None,\r\n        \"hospital_id\": \"Hodan Hospital\",\r\n        \"head_nurse_id\": None,\r\n        \"head_nurse_name\": None,\r\n        \"head_doctor_id\": None,\r\n        \"head_doctor_name\": None,\r\n        \"department_id\": None,\r\n        \"department_name\": None,\r\n        \"building_id\": None,\r\n        \"building_name\": None,\r\n        \"enable\": 0,\r\n    }\r\n]\r\n\r\n# Valid zones (wards) - must be is_station = 1\r\nzones = [\r\n    {\"name\": \"Child Bed Side\"},\r\n    {\"name\": \"Day Care (Hours)\"},\r\n    {\"name\": \"Death Room\"},\r\n    {\"name\": \"Dialysis\"},\r\n    {\"name\": \"General Ward 2\"},\r\n    {\"name\": \"General Ward Pediatric\"},\r\n    {\"name\": \"ICU\"},\r\n    {\"name\": \"Labour Room\"},\r\n    {\"name\": \"Main Emergency\"},\r\n    {\"name\": \"Mortuary\"},\r\n    {\"name\": \"NICU\"},\r\n    {\"name\": \"Nursery\"},\r\n    {\"name\": \"Pediatric Emergency\"},\r\n    {\"name\": \"Postnatal\"},\r\n    {\"name\": \"Suit Room\"},\r\n    {\"name\": \"Trauma Emergency\"},\r\n    {\"name\": \"VIP Room 39 (General Ward 1)\"},\r\n    {\"name\": \"VIP Rooms\"}\r\n]\r\n\r\n# Start with the template\r\ntemplate = request_params[0]\r\nresult = []\r\n\r\n# Populate result with zones\r\n\r\nfor idx, zone in enumerate(zones, start=1): \r\n    merged = {\r\n        **template,\r\n        \"id\": zone.get(\"name\", \"\"),\r\n        \"name\": zone.get(\"name\", \"\"),\r\n        \"english_name\": f\"zone-{idx}\",\r\n        \"description\": zone.get(\"name\", \"\"),\r\n    }\r\n    result.append(merged)\r\n\r\n# Assign result to Frappe response\r\nfrappe.response[\"message\"] = result\r\n# frappe.response[\"message\"] = len(result)  # Optional: to return count instead\r\n",
  "script_type": "API"
 }
]